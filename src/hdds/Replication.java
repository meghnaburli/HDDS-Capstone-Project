/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Replication.java
 *
 * Created on 24 Oct, 2010, 5:44:40 PM
 */

package hdds;

import com.microsoft.sqlserver.jdbc.SQLServerResultSetMetaData;
import java.awt.Color;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.net.InetAddress;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import oracle.jdbc.OracleDatabaseMetaData;
import oracle.jdbc.driver.OracleResultSetMetaData;

/**
 *
 * @author Harsh
 */
public class Replication extends javax.swing.JFrame {

    /** Creates new form Replication */
    public Replication() {
       try {
            initComponents();
            new Systemfunction().addback(frame);
            Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            DriverManager.registerDriver(new oracle.jdbc.driver.OracleDriver());
        } catch (Exception ex) {
           
        }
   
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jPasswordField1 = new javax.swing.JPasswordField();
        jScrollPane1 = new javax.swing.JScrollPane();
        load = new javax.swing.JList();
        jLabel6 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        dfl = new javax.swing.JList();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Replication:Step 1 of 3");
        setMinimumSize(new java.awt.Dimension(700, 400));
        setResizable(false);

        jLabel1.setText("Database Format");

        jLabel2.setText("No. of Replicas");

        jLabel3.setText("Selected Table");

        jTextField2.setEditable(false);

        jLabel4.setText("Username");

        jLabel5.setText("Password");

        load.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        load.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                loadValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(load);

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("List of Available Databases");

        jButton1.setText("Next");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        dfl.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "SQL", "ORACLE", "ACCESS" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        dfl.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        dfl.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        dfl.setDragEnabled(true);
        dfl.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                dflValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(dfl);

        jLabel7.setText("Max=");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPasswordField1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                            .addComponent(jTextField3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7)
                        .addGap(44, 44, 44))
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(38, 38, 38)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(68, 68, 68)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton1)
                            .addComponent(jButton2)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
      this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void dflValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_dflValueChanged
     loop: if(!evt.getValueIsAdjusting())
            {
            jLabel7.setText("Max="+new Systemfunction().maxavailable(dfl.getAnchorSelectionIndex()));
            jLabel7.update(jLabel7.getGraphics());
             String[] nu={"Nothing to show "};

             read="sa";
             String [] listf=null;
             BufferedReader win;
             int sel= dfl.getAnchorSelectionIndex();
             int ora=0;
             try {
                win = new BufferedReader(new FileReader(System.getProperty("user.dir")+"/system\\info.txt"));
                if (sel==0) // sql
                {read=win.readLine();
                ora=0;
                database="";
                }if (sel==1) //oracle
                {ora=1;
                win.readLine();
                win.readLine();
                database=win.readLine();
                read=database;}
                 if(sel==2)//access
                 {      database="";
                     win = new BufferedReader(new FileReader(System.getProperty("user.dir")+"/system\\info.txt"));
                     read=win.readLine();
                     read=win.readLine();
                     ora=0;
                 }   //System.out.println(database);
                 //System.out.println( " read " + read);
                    if (read==null || read.equalsIgnoreCase(""))
                    load.setListData(nu);
                    if(read.equalsIgnoreCase("sa") && ora==0)
                    load.setListData(nu);


                 if (ora==1 && database!=null && !database.equalsIgnoreCase(""))
                {
                Connection con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:"+database,"scott" , "tiger"); //database name instead of ORCl
                OracleDatabaseMetaData dmd = (OracleDatabaseMetaData)con.getMetaData();

                ResultSet rs1 = null;
                rs1 = dmd.getTables(null,"SCOTT","%",null);
                int i=0;
                while(rs1.next())
                {
                     //     System.out.println("   "+ rs1.getString(3)+" : "+rs1.getString(4));
                   i++;
                }
                listf=new String[i];
                i=0;
                rs1 = dmd.getTables(null,"SCOTT","%",null);
                while(rs1.next())
                {
                //System.out.println("dsfsd" + rs1.getString(4));
                    listf[i++]=rs1.getString(3);
                }
                load.setListData(listf);
                con.close();
                }//end of ora
                else
                {
                     if (ora==1)
                     load.setListData(nu);
                }

                   FileFilter acs=new FileFilter() {


            public boolean accept(File pathname) {
                //pathname.getName();
                //System.out.println("pathnames" + pathname.getAbsolutePath()+"name " + pathname.getName());
                String [] spltf=pathname.getName().split("\\.");
                int len=spltf.length;
                String fileext="";
                if(len>1)
                fileext=spltf[len-1];
                if(fileext.equalsIgnoreCase("accdb") || fileext.equalsIgnoreCase("mdb"))
                return true;
                else
                return false;
            }
        };
                   FileFilter sqlff=new FileFilter() {

            public boolean accept(File pathname) {
                //pathname.getName();
                //System.out.println("pathnames" + pathname.getAbsolutePath()+"name " + pathname.getName());
                String [] spltf=pathname.getName().split("\\.");
                int len=spltf.length;
                String fileext="";
                if(len>1)
                fileext=spltf[len-1];
                String database="";
                for (int j=0;j<spltf.length-1;j++)
                database+=spltf[j];
                if(fileext.equalsIgnoreCase("mdf") && !database.equalsIgnoreCase("mssqlsystemresource") && !database.equalsIgnoreCase("msdbdata") )
                return true;
                else
                return false;
            }
        };


                    if (!read.equalsIgnoreCase("sa") && read!=null)
                    {
                    File self=new File(read);
                    String temp []=self.list(); // validation needed for all other filess
                    if(temp!=null && sel==0)
                    {
                        for (int i=0;i<temp.length;i++)
                        {
                            boolean ac=sqlff.accept(new File(temp[i]));
                            if (!ac)
                            temp[i]="";
                            //System.out.println("s" + temp[i]);
                        }
                        //load.setListData(listf);
                        int g=0;
                        for(int h=0;(h<temp.length);h++)
                        {
                            if(!temp[h].equalsIgnoreCase(""))
                             g++;
                        }
                        System.out.println("g" + g);
                        listf=new String[g];
                        g=0;
                        for(int h=0;h<temp.length;h++)
                        {
                            if(!temp[h].equalsIgnoreCase(""))
                            listf[g++]=temp[h];
                        }
                        load.setListData(listf);
                    }
                    else if(temp!=null && sel==2)
                    {

                        for (int i=0;i<temp.length;i++)
                        {
                            boolean ac=acs.accept(new File(temp[i]));
                            if (!ac)
                            temp[i]="";
                            //System.out.println("s" + temp[i]);
                        }
                        //load.setListData(listf);
                        int g=0;
                        for(int h=0;(h<temp.length);h++)
                        {
                            if(!temp[h].equalsIgnoreCase(""))
                             g++;
                        }
                        //System.out.println("g" + g);
                        listf=new String[g];
                        g=0;
                        for(int h=0;h<temp.length;h++)
                        {
                            if(!temp[h].equalsIgnoreCase(""))
                            listf[g++]=temp[h];
                        }
                        load.setListData(listf);
                    }
                    }
                    else
                    load.setListData(nu);





            } catch (Exception ex) {
               ex.printStackTrace();
               //read="sa";
               //load.setListData(nu);
            }
        } // TODO add your handling code here:
    }//GEN-LAST:event_dflValueChanged

    private void loadValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_loadValueChanged
        if (!evt.getValueIsAdjusting())
        {    jTextField2.setText((String)load.getSelectedValue());

        }
    }//GEN-LAST:event_loadValueChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    if(jTextField1.getText()!=null && !jTextField1.getText().equalsIgnoreCase("") )
  {
  if(Integer.parseInt(jTextField1.getText())<=Integer.parseInt(jLabel7.getText().split("=")[1]))
  {
    nf=Integer.parseInt(jTextField1.getText());
    file=(String)load.getSelectedValue();
    usrnam=jTextField3.getText();
    pass=jPasswordField1.getPassword();
    
    if((jTextField2.getText()!=null && !jTextField2.getText().equalsIgnoreCase("")))
  { int type=dfl.getAnchorSelectionIndex();
    if(nf>0 && nf<=20)
    {

    //type++;
    //if(type==3)
     //   type=2;
   // else if(type==2)
        //type=3;
    
        //System.out.println(type);
        String [] spltf=file.split("\\.");
        int len=spltf.length;

        if(len>1)
        {fileext=spltf[len-1];

        }
        else
        { // oracle selection
        fileext="ora";

        }
        Systemfunction obj=new Systemfunction();
        boolean replicaexist=obj.checkreplica(file);
    if(!replicaexist)
    {
                this.getContentPane().removeAll();
                this.getContentPane().update(getGraphics());
                this.repaint();
            boolean err=step2();
            System.out.println("err step 2 "+err);
            if (err)
            {
               this.getContentPane().removeAll();
               this.getContentPane().update(getGraphics());
               this.repaint();
            String errror[]={"Possible Causes","1.No nodes found in iplist file","2.Internal Error"};
            errorcheck(errror);
            this.dispose();
            //could be an internal error
            //display n error box
            }



        
    }else
        {   String er[]={"One or more Replica's of the same database exist on rhe network"};
            errorcheck(er);

        }
    }else{

                String er[]={"No of replicas allowed are in the range of 1 to 20"};
             errorcheck(er);


          }
     }else{
             String er[]={"Please select a table for replicas"};
            errorcheck(er);

        }

     }else
     {
       String er[]={"Enter no of replicas less than then or equal to max available"};
            errorcheck(er);

     }}
    else{
            String er[]={"Enter no of replicas "};
            errorcheck(er);



        }
    // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private boolean step2()
    { // show the list of ips with all the available databases or only supported // show the column names for easy manipulation
     boolean err=false;
        try{
            JPanel panel1=new JPanel();
        this.setTitle("Replica:Step 2 of 3");
        this.setSize(Toolkit.getDefaultToolkit().getScreenSize());
        this.update(getGraphics());
        this.repaint();
        for (int i=0;i<pass.length;i++)
       pas+=pass[i]+"";

     String [] spltf=file.split("\\.");
int len=spltf.length;

if(len>1)
{fileext=spltf[len-1];

}
else
{ // oracle selection
fileext="ora";

}
filenam=jTextField2.getText();
jfq=new JTextField[nf];
ip1l=new  JComboBox[nf];
String ipre="";
BufferedReader ipl=new BufferedReader(new FileReader(System.getProperty("user.dir")+"/system\\iplist.txt"));
//validation if file doesnt exist
ipre=ipl.readLine();
int countip=1;
while (ipre!=null)
{countip++;
ipre=ipl.readLine();
//System.out.println(ipre);
}
//System.out.println("count ip " + countip);
ip1=new String[countip-1];
ipl.close();

BufferedReader inf=new BufferedReader(new FileReader(System.getProperty("user.dir")+"/system\\inf.txt"));
String inread=inf.readLine();
String temp[]=null;
countip=0;
while(inread!=null)
{
temp=inread.split(",");
if(temp.length>=1)
{if(temp[0].equalsIgnoreCase("1") && fileext.equalsIgnoreCase("mdf"))
    countip++;
}
if(temp.length>=2)
{//System.out.println("temop " + temp[1]);
    if(temp[1].equalsIgnoreCase("2") && (dfl.getSelectedIndex()==2))
countip++;
}
if(temp.length>=3)
{if(temp[2].equalsIgnoreCase("3") && (dfl.getSelectedIndex()==1))
 countip++;
}
inread=inf.readLine();
}
int lines [] =new int[countip];
inf=new BufferedReader(new FileReader(System.getProperty("user.dir")+"/system\\inf.txt"));
inread=inf.readLine();
countip=0;
int lin=1;
while(inread!=null)
{
temp=inread.split(",");

if(temp.length>=1)
{
    if(temp[0].equalsIgnoreCase("1") && fileext.equalsIgnoreCase("mdf"))
    lines[countip++]=lin;}
if(temp.length>=2)
{//System.out.println("temop " + temp[1]);
    if(temp[1].equalsIgnoreCase("2") && (dfl.getSelectedIndex()==2))
    lines[countip++]=lin;

}
if(temp.length>=3)
{ //  System.out.println(temp[2]);
    if(temp[2].equalsIgnoreCase("3") && (dfl.getSelectedIndex()==1))
    lines[countip++]=lin;
}
inread=inf.readLine();
lin++;
}
//System.out.println("count" + countip);
String [] lstip=new String[countip];

ipl=new BufferedReader(new FileReader(System.getProperty("user.dir")+"/system//iplist.txt"));
int k=0;
for(int i=0;i<lines.length;i++)
{
    //System.out.println("m " + lines[i] +  k );
while(k!=lines[i])
{k++;
read=ipl.readLine();
lstip[i]=read;

}


}

//if no ips found stop the execution
if(lstip.length==0)
    err=true;
//String [] temp=new String[4];
 ipl.close();
 /*
for (int c=0;c<(countip-1);c++)
{ ipre=ipl.readLine();
 ip1[c]=ipre;
//we wont be needing the iplist file
}*/

ipl.close();
for (int i=0;i<nf;i++)
{
    ip1l[i]=new JComboBox(lstip);
 ip1l[i].setSize(50, 10);
}

panel1.setLayout(new GridBagLayout());

GridBagConstraints c = new GridBagConstraints();

int g=0;
int h=0;

    for ( g=0,h=0;g<jfq.length;g++,h=g+2)
    {
    jfq[g]=new JTextField("Replica " + (g+1) + " to be stored on ");
    c.fill = GridBagConstraints.HORIZONTAL;
    c.weightx=0;
    c.ipadx=5;
    c.ipady=5;
    c.gridx=0;
    c.gridy=h;
    c.insets=new Insets(20,10,0,0);


    jfq[g].setEditable(false);
    jfq[g].setSize(200, 30);
    jfq[g].setColumns(30);
    jfq[g].setVisible(true);
    panel1.add(jfq[g],c);

    c.fill = GridBagConstraints.HORIZONTAL;
    c.weightx = 0.5;
    c.gridx=1;
    c.gridy=h;
    c.ipadx=5;
    c.ipady=5;
     c.insets=new Insets(20,10,0,0);



panel1.add(ip1l[g],c);
c.fill = GridBagConstraints.HORIZONTAL;
c.weightx = 0.5;
c.gridx=3;
c.gridy=h;
c.ipadx=5;
c.ipady=5;
 c.insets=new Insets(20,10,0,0);


}
    JButton step2ok=new JButton("Next");
    c.weightx=0.5;
    c.gridx=0;
    c.gridy=h+3;

    c.gridwidth=2;
    c.anchor=GridBagConstraints.CENTER;
    c.fill=GridBagConstraints.NONE;
     c.insets=new Insets(20,10,0,0);
     //c.anchor=GridBagConstraints.PAGE_END;

    step2ok.addActionListener(new ActionListener() {

                                                    public void actionPerformed(ActionEvent e) {
                                                       step3();
                                                    }
                                                });
                                                panel1.add(step2ok,c);
    JButton step2cancel=new JButton(" Cancel ");
    c.weightx=0.5;
    c.gridx=1;
    c.gridy=h+3;

    c.gridwidth=2;
    c.anchor=GridBagConstraints.SOUTH;
    c.fill=GridBagConstraints.NONE;
     c.insets=new Insets(20,10,0,0);

    step2cancel.addActionListener(new ActionListener() {

                                                    public void actionPerformed(ActionEvent e) {
                                                     frame.dispose();
                                                    }
                                                });
                                                panel1.add(step2cancel,c);
/*
ImageIcon icon = new ImageIcon("pics\\background.png");
panel1.setSize(icon.getIconWidth(),icon.getIconHeight());
JLabel label=new JLabel();
label.setIcon(icon);
label.setSize(icon.getIconWidth(),icon.getIconHeight());
label.setVisible(true);
panel1.add(label);
*/
JScrollPane mysc=new JScrollPane(panel1,JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
//mysc.setSize(panel1.getSize());


//panel1.setSize(1000,450);
panel1.setVisible(true);
this.add(mysc);
mysc.setVisible(true);


//this.pack();
//this.setSize(mysc.getSize());
this.setSize((int)(Toolkit.getDefaultToolkit().getScreenSize().getWidth()*0.6),(int)(Toolkit.getDefaultToolkit().getScreenSize().getHeight()*0.6));
//this.update(this.getGraphics());

panel1.setSize((int)this.getSize().getWidth()-5,(int)this.getSize().getHeight()-5);
panel1.update(panel1.getGraphics());
mysc.setSize(panel1.getSize().width-5, panel1.getSize().height-5);
mysc.update(mysc.getGraphics());
//mysc.setSize(panel1.getSize());
//this.pack();
//this.update(this.getGraphics());
//this.pack();
//this.setResizable(false);

//this.paintAll(getGraphics());
//this.repaint();



     }catch(Exception e){e.printStackTrace();err=true;}
    return err;}



    public boolean  errorcheck(String err [] )//dialog box
    {
    //System.out.println("Message  sadasd" +err.length );
            boolean cont=true;



final JDialog errorBox=new JDialog(frame,"Error",JDialog.ModalityType.APPLICATION_MODAL);
errorBox.setLayout(new GridBagLayout());

GridBagConstraints c = new GridBagConstraints();
c.gridwidth=3;
System.out.println("error length" + err.length);
JLabel lbl[]=new JLabel[err.length];
int g=0;
for(g=0;g<err.length && err[g]!=null;g++)

{
    if(!err[g].equalsIgnoreCase("false"))
    {

    lbl[g]=new JLabel(err[g]);
    c.fill = GridBagConstraints.HORIZONTAL;
    c.weightx = 0.5;
    c.ipadx=0;
    c.ipady=10;
    c.gridx=1;
    c.gridy=g;

lbl[g].setSize(100, 30);
lbl[g].setVisible(true);
errorBox.add(lbl[g],c);

    System.out.println("Message "+g +"   " +err[g]);
    cont=false;
    }
    /*else
    {
        Message="Correct Query";
    }*/
            }
JButton button1= new JButton("ok");
//c.fill = GridBagConstraints.HORIZONTAL;
    c.weightx = 0.5;
    c.ipadx=0;
    c.ipady=10;
    c.gridx=2;
    c.gridy=(++g+2);
    c.gridwidth=2;
    c.anchor=GridBagConstraints.CENTER;
    c.fill=GridBagConstraints.NONE;

    button1.setSize(50,50);

    button1.setMaximumSize(new Rectangle(50,50).getSize());



    //button1.setBounds(200,200,70, 50);
    button1.setVisible(true);
    errorBox.add(button1,c);
    button1.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e)
            {

                //throw new UnsupportedOperationException("Not supported yet.");
                errorBox.dispose();


            }
        });
    errorBox.pack();
    //errorBox.setSize(500,300);
    errorBox.setResizable(false);
    errorBox.setLocationRelativeTo(this.getContentPane());
    if(!cont)
    errorBox.setVisible(true);





return cont;
}


     public void step3(){


                this.setTitle("Replication:Step 3 of 3");
                ip=new String[(Integer.parseInt(jTextField1.getText()))];
                for (int j=0;j<ip.length;j++)
                {
                    
                    ip[j]=(String)ip1l[j].getSelectedItem();
                }

                //kill ne tempcnffile present,this ensures that all new fragmented data is ritten to tempcnffile
                File cnf=new File(System.getProperty("user.dir")+"/system//tempcnffile.txt");
                if(cnf.exists())
                cnf.delete();
                /*
               System.out.println("username " + usrnam);
                System.out.println("password " + pas);
                System.out.println("no of frag " + finalquery.length);
                System.out.println("fileext " + fileext);
                System.out.println("filnameeeeeeee " + database);
                System.out.println("database " + ((String)load.getSelectedValue()));
                System.out.println("filename " + new File((String)read + "\\"+load.getSelectedValue()) );
                // new File((String)read + "\\"+load.getSelectedValue())
                */
                int type=0;
                if(!fileext.equalsIgnoreCase("ora"))
                {database=load.getSelectedValue().toString().split("\\.")[0];
                type=1;
                }else
                {
                 try{
                        BufferedReader win =new BufferedReader(new FileReader(System.getProperty("user.dir")+"/system//info.txt"));
                        String rad=win.readLine();
                        rad=win.readLine();
                        rad=win.readLine();
                        database=rad;
                        win.close();
                        type=2;
                 }catch(Exception e){e.printStackTrace();}
                }
                String error[]={"false",""};
                            if (fileext.equalsIgnoreCase("accdb") || fileext.equalsIgnoreCase("mdb"))
            {
                error= accessfrag(database,new File(System.getProperty("user.dir")+(String)"/access//"+load.getSelectedValue()),ip.length,pas,usrnam,ip);
                type=3;
            }
              
    boolean contip=new Systemfunction().findsipduplicate(ip);
     boolean tableexist=false;
    if(type!=1)
    tableexist=checktableexist(usrnam, pas, type,load.getSelectedValue().toString(), ip);
    else
    tableexist=checktableexist(usrnam, pas, type,database/*load.getSelectedValue().toString()*/, ip);

     System.out.println("table exist" + load.getSelectedValue() + tableexist + type);
    if(!tableexist)
    {
        if(!contip)
    {
    boolean selfip=false;

    String hostip=null;
    try{
    hostip=InetAddress.getLocalHost().getHostAddress();
    }catch(Exception e ){e.printStackTrace();}
    for(int i=0;i<ip.length;i++)
    {
        //System.out.println(ip[i]+" " +hostip.equalsIgnoreCase(ip[i]));
    if(hostip.equalsIgnoreCase(ip[i]))
    {selfip=true;
    break;
    }
    }

    if(!selfip)
    {
    String errsuc []=new String[ip.length];
    String err [] =new String[ip.length];
    //boolean cont=errorcheck(error);                                                          if (cont)           //this cont continues if query allrite
                                                                                            {
                                                                                            int w=0;
                                                                                            Systemfunction msg=new Systemfunction();
                                                                                            final JDialog msgbox=new JDialog(frame,"Message");
                                                                                            GridBagConstraints c = new GridBagConstraints();
                                                                                            msgbox.setLayout(new GridBagLayout());
                                                                                            msgbox.setSize(900,400);
                                                                                            msgbox.setResizable(false);
                                                                                            c.fill = GridBagConstraints.HORIZONTAL;
                                                                                            c.gridwidth=1;
                                                                                            c.gridx=0;
                                                                                            c.gridy=w;
                                                                                            JLabel lbl=new JLabel("1.Checking if all nodes are available");
                                                                                            msgbox.add(lbl,c);
                                                                                           // msgbox.pack();
                                                                                            
                                                                                            msgbox.setLocationRelativeTo(frame);
                                                                                            msgbox.setVisible(true);
                                                                                            msgbox.update(msgbox.getGraphics());
                                                                                            msgbox.paintAll(msgbox.getGraphics());
                                                                                            comm up=new comm("up",ip);
                                                                                            String [] iperr=up.run2();
                                                                                            up=null;
                                                                                            //String []iperr={"false",""};
                                                                                            if(iperr[0].equalsIgnoreCase("true"))
                                                                                            {
                                                                                            //System.out.println("All ips are up ");
                                                                                            JProgressBar pro=new JProgressBar(0,ip.length*5);
                                                                                            pro.setValue(1);
                                                                                            pro.setForeground(Color.GREEN);
                                                                                            pro.setSize(msgbox.getSize());
                                                                                            pro.setVisible(true);
                                                                                            c.gridy=w+2;
                                                                                            msgbox.add(new JLabel("2.Sending Replicated tables "),c);
                                                                                            c.gridx=1;

                                                                                            msgbox.add(pro,c);
                                                                                            //msgbox.pack();
                                                                                           // msgbox.setSize((int)msgbox.getSize().getWidth()*2,(int)msgbox.getSize().getHeight()*2);

                                                                                            msgbox.update(msgbox.getGraphics());
                                                                                            msgbox.paintAll(msgbox.getGraphics());
                                                                                            c.gridx=0;

                                                                                            if (fileext.equalsIgnoreCase("accdb") || fileext.equalsIgnoreCase("mdb"))
                                                                                            {
                                                                                             initiatefiletransfer [] ifl=new initiatefiletransfer[ip.length];
                                                                                             String filename=(String)load.getSelectedValue();

                                                                                            for (int k=0;k<ifl.length;k++)
                                                                                            {
                                                                                            ifl[k]=new initiatefiletransfer(ip[k]);
                                                                                            //String temp[]=ifl[k].run2();
                                                                                            String temp[]=ifl[k].run2(new File(System.getProperty("user.dir")+"/access//temp//"+database+"$R_"+k+"."+fileext));
                                                                                            errsuc[k]=temp[0];
                                                                                            err[k]=temp[1];
                                                                                              pro.setValue((k+1)*5);


                                                                                            msgbox.update(msgbox.getGraphics());
                                                                                            msgbox.paintAll(msgbox.getGraphics());
                                                                                           }
                                                                                            }
                                                                                            
                                                                                        if (fileext.equalsIgnoreCase("mdf"))
                                                                                        {
                                                                                            String sqlas[]=  sqlfrag(database,ip.length,pas,usrnam,ip);
                                                                                            initiatearraytransfer [] iaf=new initiatearraytransfer[ip.length];
                                                                                            for (int i=0;i<ip.length;i++)
                                                                                            {
                                                                                            iaf[i]=new initiatearraytransfer(ip[i],sqlas);
                                                                                            iaf[i].setPriority(Thread.MAX_PRIORITY);
                                                                                            String temp[]=iaf[i].run2();
                                                                                            errsuc[i]=temp[0];
                                                                                            err[i]=temp[1];

                                                                                             pro.setValue((i+1)*5);

                                                                                            msgbox.update(msgbox.getGraphics());
                                                                                            msgbox.paintAll(msgbox.getGraphics());
                                                                                          }



                                                                                        }//end of sql
                                                                                        
                                                                                                if (fileext.equalsIgnoreCase("ora"))
                                                                                            {

                                                                                                String sqlas[]=  orafrag(jTextField2.getText(),database,ip.length,pas,usrnam,ip);
                                                                                                initiatearraytransfer [] iaf=new initiatearraytransfer[ip.length];

                                                                                                for (int i=0;i<ip.length;i++)
                                                                                                {  // System.out.println("ipi " + ip[i]);
                                                                                                    iaf[i]=new initiatearraytransfer(ip[i],sqlas);
                                                                                                    iaf[i].setPriority(Thread.MAX_PRIORITY);

                                                                                                    String temp[]=iaf[i].run2();
                                                                                                    errsuc[i]=temp[0];
                                                                                                    err[i]=temp[1];

                                                                                             pro.setValue((i+1)*5);

                                                                                            msgbox.update(msgbox.getGraphics());
                                                                                            msgbox.paintAll(msgbox.getGraphics());
                                                                                          
                                                                                                }



                                                                                            }//end of ora
                                                                                            
                                                                                boolean cont2=errorcheck2(errsuc,err);
                                                                                //cont2 true means all replicated file,tables have been transfered n now only cnffile needs to be done
                                                                                //cont2=false;
                                                                                String ipblocked []=new String[10];
                                                                                if (cont2)
                                                                                {   try{
                                                                                        Systemfunction obj=new Systemfunction();
                                                                                   // doubtful
                                                                                        //deletes table from cnffile.mit not need this
                                                                                    //String er[]= obj.deltablefromcnf((String)loat.getSelectedValue(),InetAddress.getLocalHost().getHostAddress());
                                                                                    //er[1]=gives error mesage,er[0]=true or false

                                                                                                  w=w+2;
                                                                                    c.gridy=w+2;
                                                                                    msgbox.add(new JLabel("3.Taking backup for roll back action"),c);
                                                                                     //msgbox.pack();
                                                                                           // msgbox.setSize((int)msgbox.getSize().getWidth()*2,(int)msgbox.getSize().getHeight()*2);

                                                                                            msgbox.update(msgbox.getGraphics());
                                                                                            msgbox.paintAll(msgbox.getGraphics());
                    
                                                                                        obj.backup(new File(System.getProperty("user.dir")+"/system//cnffile.txt").getParent());
                                                                                   //taaking bACKUP
                                                                                    //String er2[]=obj.appendfile("system//cnfcopy", "system//cnffile",false);
                                                                                     w=w+2;
                                                                                    c.gridy=w+2;
                                                                                    msgbox.add(new JLabel("4.Updating Configuration files"),c);
                                                                                  // msgbox.pack();
                                                                                    //        msgbox.setSize((int)msgbox.getSize().getWidth()*2,(int)msgbox.getSize().getHeight()*2);

                                                                                            msgbox.update(msgbox.getGraphics());
                                                                                            msgbox.paintAll(msgbox.getGraphics());

                                                                                        String er1[]=obj.appendfile(System.getProperty("user.dir")+"/system//tempcnffile.txt",System.getProperty("user.dir")+"/system//cnffile.txt" ,true);
                                                                                   //doubtful til here
                                                                                            //er2[1]=gives error mesage,er[0]=true or false
                                                                                    //make sum dialog boxes
                                                                                    //we dont require cnfcopy since backing up entire system folder
                                                                                    if(er1[0].equalsIgnoreCase("true") /*&& er2[0].equalsIgnoreCase("true")*/)
                                                                                    {


                                                                                            w=w+2;
                                                                                    c.gridy=w+2;
                                                                                    msgbox.add(new JLabel("5.Sending Updated Configuration files"),c);
                                                                                  // msgbox.pack();
                                                                                    //        msgbox.setSize((int)msgbox.getSize().getWidth()*2,(int)msgbox.getSize().getHeight()*2);

                                                                                            msgbox.update(msgbox.getGraphics());
                                                                                            msgbox.paintAll(msgbox.getGraphics());

                                                                                        global.server=true;
                                                                                        global.free=false;
                                                                                        File iplistf=new File(System.getProperty("user.dir")+"/system//iplist.txt");
                                                                                        BufferedReader win =new BufferedReader(new FileReader(iplistf));
                                                                                        String reada=win.readLine();
                                                                                        String eror[]=null;
                                                                                        ipblocked =new String[10];//static
                                                                                        //ipblocked[0]=reada;

                                                                                        int u=0;
                                                                                        int ers=0;
                                                                                              while(reada!=null)
                                                                                             {

                                                                                                if(reada.equalsIgnoreCase(InetAddress.getLocalHost().getHostAddress()))
                                                                                                reada=win.readLine();
                                                                                                if(reada!=null)
                                                                                                ipblocked[u++]=reada;
                                                                                                else
                                                                                                break;

                                                                                               // System.out.println(" ip blocked  " + reada + " u is " + (u-1));
                                                                                            File cnffile=new File(System.getProperty("user.dir")+"/system//cnffile.txt");
                                                                                            //System.out.println("cnffile " + cnffile.exists());
                                                                                            initiatefiletransfer cn=new initiatefiletransfer(reada);
                                                                                            cn.setPriority(Thread.MAX_PRIORITY);
                                                                                            eror= cn.run2(cnffile);
                                                                                            reada=win.readLine();
                                                                                            //System.out.println(" ip blocked  " + reada + " u is " + (u-1));
                                                                                            if(eror[0].equalsIgnoreCase("true"))
                                                                                            continue;
                                                                                            else
                                                                                            {
                                                                                            ers=1;
                                                                                            break;
                                                                                            }
                                                                                            }
                                                                                            win.close();
                                                                                //ers=1;//for abort
                                                                                if(ers==1 || !global.cont)
                                                                                {
                                                                                    //roll back everything send abort msg to all ips,rename backup_system to system and delete system
                                                                                //new File("system//").delete();
                                                                                //new File("backup_system//").renameTo(new File("system//"));
                                                                                    w=w+2;
                                                                                    c.gridy=w+2;
                                                                                    msgbox.add(new JLabel("6.Rolling back action because configuration file  couldn't be sent to all nodes"),c);
                                                                                    //msgbox.pack();
                                                                                    //        msgbox.setSize((int)msgbox.getSize().getWidth()*2,(int)msgbox.getSize().getHeight()*2);
                                                                                        JButton ok=new JButton("OK");
                                                                                            ok.setSize(40, 20);
                                                                                            ok.setVisible(true);
                                                                                            ok.addActionListener(new ActionListener() {

                                                                                              public void actionPerformed(ActionEvent e) {
                                               msgbox.setVisible(false);
                                               msgbox.update(msgbox.getGraphics());
                                               msgbox.paintAll(msgbox.getGraphics());

                                                }
                                                                                              });
                                                                                            msgbox.update(msgbox.getGraphics());
                                                                                            msgbox.paintAll(msgbox.getGraphics());
                          
                                                                                    File direc=new File(System.getProperty("user.dir")+"/backup_system\\").getCanonicalFile();
                                                                                //File dir=new File("C:\\Users\\Harsh\\Documents\\NetBeansProjects\\HDDS\\src\\hdds\\backup_system");
                                                                                //System.out.println("file "+ direc.equals(dir) + " isdir" + direc.getCanonicalPath());
                                                                                File tempsd []=direc.listFiles();
                                                                               Systemfunction sobj=new Systemfunction();
                                                                                //System.out.println("sobk " + tempsd.length + " ss" + direc.getParentFile().getPath());

                                                                                for(int i=0;i<tempsd.length;i++)
                                                                                {
                                                                                //System.out.println("path" + direc.getParentFile().getPath() + "//system//"  + tempsd[i].getName()) ;

                                                                                    sobj.textfilecopy(tempsd[i].toString(),direc.getParentFile().getPath() + "//system//"  + tempsd[i].getName());

                                                                                }
                                                                                comm abort=new comm("abort",ipblocked);
                                                                                String er[]=abort.run2();
                                                                                System.out.println("sent abort to all ips " + er [0] + "if false then  mesage " + er[1] );

                                                                                                            if(er[0].equalsIgnoreCase("false"))
                                                                                {

                                                                                        msgbox.setVisible(false);
                                                                                        msgbox.update(msgbox.getGraphics());
                                                                                        msgbox.paintAll(msgbox.getGraphics());
                                                                                                                 global.ip="";
                    global.server=true;
                    global.access=false;
                    global.free=true;
                                                                                        String irer[]={"Software caused an irrecoverable error please perform setup again on all nodes"};
                                                                                    errorcheck(irer);
                                                                                              
                                                                                }

                                                                                }//erorr while transfering
                                                                                else
                                                                                {



                                                                                                 w=w+2;
                                                                                                c.gridy=w+2;
                                                                                    msgbox.add(new JLabel("6.Replication has been performed successfully"),c);
                                                                                    //msgbox.pack();
                                                                                            //msgbox.setSize((int)msgbox.getSize().getWidth()*2,(int)msgbox.getSize().getHeight()*2);
                                                                                              global.ip="";
                    global.server=true;
                    global.access=false;
                    global.free=true;
                                                                                            msgbox.update(msgbox.getGraphics());
                                                                                            msgbox.paintAll(msgbox.getGraphics());
                                                                                            JButton ok=new JButton("OK");
                                                                                            ok.setSize(40, 20);
                                                                                            ok.setVisible(true);
                                                                                            ok.addActionListener(new ActionListener() {

                                                                                              public void actionPerformed(ActionEvent e) {
                                               msgbox.setVisible(false);
                                               msgbox.update(msgbox.getGraphics());
                                               msgbox.paintAll(msgbox.getGraphics());

                                                }
                                                                                              });





                                                                                comm suc=new comm("success",ipblocked);
                                                                                String er[]=suc.run2();
                                                                                System.out.println(" sent success to all ips ");
                                                                                System.out.println("if false errorr " + er[0] + " mesage  " + er[1]);
                                                                                //if eror over here then hell with it,tel user to handle it himself
                                                                                   if(er[0].equalsIgnoreCase("false"))
                                                                                {

                                                                                        msgbox.setVisible(false);
                                                                                        msgbox.update(msgbox.getGraphics());
                                                                                        msgbox.paintAll(msgbox.getGraphics());
                                                                                           global.ip="";
                    global.server=true;
                    global.access=false;
                    global.free=true;
                                                                                    String irer[]={"Software caused an irrecoverable error please perform setup again on all nodes"};
                                                                                    errorcheck(irer);
                                                                                                                         
                                                                                }else
                                                                                {           Thread.sleep(100);
                                                                                             w=w+2;
                                                                                            c.gridy=w+2;
                                                                                            msgbox.add(ok,c);
                                                                                           // msgbox.pack();
                                                                                           // msgbox.setSize((int)msgbox.getSize().getWidth()*2,(int)msgbox.getSize().getHeight()*2);
                                                                                            msgbox.update(msgbox.getGraphics());
                                                                                            msgbox.paintAll(msgbox.getGraphics());

                                                                                    //msgbox.setVisible(false);
                                                                                }
}
                                                                                    }
                                                                                                        else
                                                                                                        { msgbox.setVisible(false);
                                                                                                        msgbox.update(msgbox.getGraphics());
                                                                                                        msgbox.paintAll(msgbox.getGraphics());

                                                                                                        String irer[]={"Configuration file couldn't be updated please make sure it is created and closed"};
                                                                                                        errorcheck(irer);
                                                                              
                                                                                                            System.out.println("cudnt update cnffile ");
                                                                                                        //couldnt update cnffile show error
                                                                                                        //rare error so priority less
                                                                                                        }
                                                                                    //delete the tempcnffile formed during fragmentation
                                                                                    new File(System.getProperty("user.dir")+"/system/tempcnffile.txt").delete();

                                                                                    }catch(Exception e){e.printStackTrace();}
                                                                                }//end of if cont2
                                                                                else
                                                                                    {
                                                                                    w=w+2;
                                                                                    c.gridy=w+2;
                                                                                    msgbox.add(new JLabel("Rolling back action because received error from remote host"),c);
                                                                                     JButton ok=new JButton("OK");
                                                                                            ok.setSize(40, 20);
                                                                                            ok.setVisible(true);
                                                                                            ok.addActionListener(new ActionListener() {

                                                                                              public void actionPerformed(ActionEvent e) {
                                                                                               msgbox.setVisible(false);
                                                                                               msgbox.update(msgbox.getGraphics());
                                                                                               msgbox.paintAll(msgbox.getGraphics());
                                                                                             frame.dispose();
                                                }
                                                                                              });
                                                                                              w=w+2;
                                                                                            c.gridy=w+2;
                                                                                            msgbox.add(ok,c);
                                                                                              msgbox.update(msgbox.getGraphics());
                                                                                            msgbox.paintAll(msgbox.getGraphics());
                                                                                            
                                                                                            try{
                                                                                File direc=new File(System.getProperty("user.dir")+"/backup_system\\").getCanonicalFile();
                                                                                File tempsd []=direc.listFiles();
                                                                               Systemfunction sobj=new Systemfunction();
                                                                                //System.out.println("sobk " + tempsd.length + " ss" + direc.getParentFile().getPath());

                                                                                for(int i=0;i<tempsd.length;i++)
                                                                                {
                                                                                //System.out.println("path" + direc.getParentFile().getPath() + "//system//"  + tempsd[i].getName()) ;

                                                                                    sobj.textfilecopy(tempsd[i].toString(),direc.getParentFile().getPath() + "//system//"  + tempsd[i].getName());

                                                                                }

                                                                                comm abort=new comm("abort",ipblocked);
                                                                                String er[]=abort.run2();
                                                                                System.out.println("sent abort to all ips " + er [0] + "if false then  mesage " + er[1] );

                                                                                                            if(er[0].equalsIgnoreCase("false"))
                                                                                {

                                                                                        msgbox.setVisible(false);
                                                                                        msgbox.update(msgbox.getGraphics());
                                                                                        msgbox.paintAll(msgbox.getGraphics());
                                                                                    String irer[]={"Software caused an irrecoverable error please perform setup again on all nodes"};
                                                                                    errorcheck(irer);
                                                                                }


                                                                                }catch(Exception e){e.printStackTrace();}

                                                                                    }//end of else cont2
                                                                                }//end of iperr
                                                                                            else
                                                                                            {msgbox.setVisible(false);
                                                                                        msgbox.update(msgbox.getGraphics());
                                                                                        msgbox.paintAll(msgbox.getGraphics());
                                                                                            Systemfunction obj=new Systemfunction();
                                                                                            System.out.println("error " + iperr[1]);
                                                                                            //errorcheck(iperr);
                                                                                            obj.showerr(iperr, frame,"network");
                                                                                            }
                                                                               

    }//else
       // {
        //String errs[]={"Replica's of the database could be formed"};
        //errorcheck(errs);

        //}
    }else{
        String err[]={"A Replica cannot be stored on the host having the original table"};
        errorcheck(err);

         }//end of selfip
    }else//end of duplicate ip
        {
        String err[]={"Same ip addresses for 2 or more Replica's"};
        errorcheck(err);
        }//end of duplicate ip

    }else
        {
         String err[]={"Table with the same name exist on one of the remote node","Possibly due to fragmentation of the table"};
        errorcheck(err);

        }
    }//end of step 3

    public boolean errorcheck2(String err[],String er[])
    {       String Message="";
        boolean cont=true;
    int e=0;
final JDialog errorBox=new JDialog(frame,"Error",JDialog.ModalityType.APPLICATION_MODAL);
errorBox.setLayout(new GridBagLayout());
GridBagConstraints c = new GridBagConstraints();
c.gridwidth=2;
JLabel lbl[]=new JLabel[err.length];
int h=0;

for( h=0;h<err.length;h++)
{//System.out.println(" err[] " + err[h]);
if (err[h].equalsIgnoreCase("false"))
{
 Message="Error in sending file to ip address "+ ip[h]+" err" +er[h]+"\\n";
 lbl[h]=new JLabel(Message);
    c.fill = GridBagConstraints.HORIZONTAL;
    c.weightx = 0.5;
    c.ipadx=0;
    c.ipady=0;
    c.gridx=0;
    c.gridy=h;

lbl[h].setSize(100, 30);
lbl[h].setVisible(true);
errorBox.add(lbl[h],c);

 cont=false;
}
}
return cont;}






    public String[] accessfrag(String database,File odb, int nof,String password,String username,String ip[])
    {
    String [] err=new String[nof];
  for (int  i=0;i<nof;i++)
   {
try{
File tempf=new File(odb.getParent()+"/temp/"+database+"$R"+"_"+i+"."+fileext);		//get new copy system this will crash ur system
tempf.createNewFile();
FileInputStream inn=new FileInputStream(odb);
FileOutputStream outt=new FileOutputStream(tempf);
byte [] rd=new byte[1024*10];
for (long h=odb.length();h>=0;h-=rd.length-1)
{
inn.read(rd);
outt.write(rd);
}
inn.close();
outt.close();

Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
String conStro = "jdbc:odbc:Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=" +  odb.getAbsolutePath();
Connection con=DriverManager.getConnection(conStro,username,password);		//password

DatabaseMetaData dbmd = con.getMetaData();
String[] types = {"TABLE"};
ResultSet resultSet = dbmd.getTables(null, null, "%", types);
int count=0;
 while (resultSet.next()) {count++;}

String tableName[]=new String[count];
count=0;
resultSet = dbmd.getTables(null, null, "%", types);
    // Get the table names
    while (resultSet.next()) {
        // Get the table name
       tableName[count++] = resultSet.getString(3);

		}
resultSet.close();
BufferedWriter wout=new BufferedWriter(new FileWriter(System.getProperty("user.dir")+"/system/tempcnffile.txt",true));

for(int j=0;j<tableName.length;j++)
{
ResultSetMetaData rs=con.createStatement().executeQuery("select * from " + tableName[j]).getMetaData();
wout.write("Name-"+tableName[j]+","+database+"$R."+fileext+";"); // write to localcnfg file
wout.newLine();
wout.write("UP-"+username+","+password+";");
wout.newLine();
wout.write("Frag-,;");
wout.newLine();
wout.write("Col-");
String cols="";
for(int k=1;k<=rs.getColumnCount();k++)
{
cols+=rs.getColumnName(k)+",";
}
cols=cols.substring(0, cols.lastIndexOf(","));
wout.write(cols+":"+	ip[i]+";");
wout.newLine();
wout.write("R:"+nof+";");
wout.newLine();
}
wout.close();

}catch(Exception ex){
ex.printStackTrace();
err[i]=ex.getMessage();

}


   }
return err;
}


    public String[] orafrag(String table,String database,int counts,String password,String username,String ip[])
    {
     String sqlbatch []={};
try{
DriverManager.registerDriver(new oracle.jdbc.driver.OracleDriver());
Connection con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:"+ database,"scott" , "tiger"); //database name and password,username
Statement fst=con.createStatement();
Statement st=con.createStatement();

Statement sta=con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
ResultSet rsa=sta.executeQuery("select * from " + table);

 int countrow=0;
 rsa.last();
 countrow=rsa.getRow();
 //System.out.println(countrow + "countrow");

                    DatabaseMetaData dbmd =con.getMetaData();
                    String[] types = {"TABLE"};
                    ResultSet resultSet = null;
                    int contpri=0;
                    resultSet=dbmd.getPrimaryKeys(null, null, table);
                    while (resultSet.next()) {contpri++;}
                    String [] primary=null;
                    if(contpri!=0)
                    primary= new String [contpri];
                    contpri=0;
                    resultSet=dbmd.getPrimaryKeys(null, null, table);
                    while (resultSet.next())
                    {
                    primary[contpri++]=resultSet.getString(4);
                    for (int i=1;i<=6;i++)
                    {System.out.println("pi " + resultSet.getString(i));
                    }
                    }
                    String prim="";

if (primary!=null)
{
    if(primary.length>1)
    {prim+=primary[0]+",";
    for(int k=1;k<(primary.length-1);k++)
    prim+=primary[k]+","+"";
    prim+=primary[primary.length-1]+"";
    }
    else
    {
    prim+=primary[0];
    }
    System.out.println("primary" + prim);
}


        String queryontable=table; // new table name
        OracleResultSetMetaData rsMetaData = (OracleResultSetMetaData)rsa.getMetaData();
	String sql="create table  " +(queryontable) + " " +  "("; //get the table name by splitting the query string;

        int columnCount =0;
        int c=1;


     if (rsMetaData == null) {

        System.out.println("	");

      } else {

        columnCount = rsMetaData.getColumnCount();


String typ="";
int pre=0;
for(int i=1; i<=columnCount; i++) {



    if(!(typ=rsMetaData.getColumnTypeName(i)).equalsIgnoreCase("int"))
    {
    pre=rsMetaData.getPrecision(i);
    if(pre!=0 && !(pre<=0))
    sql=sql+" " + rsMetaData.getColumnName(i) + "  " + typ +"(" +pre+")"+" , ";
    else
    {   if(rsMetaData.getColumnTypeName(i).equalsIgnoreCase("date") || rsMetaData.getColumnTypeName(i).equalsIgnoreCase("timestamp") || rsMetaData.getColumnTypeName(i).equalsIgnoreCase("time"))
        sql=sql+" " +rsMetaData.getColumnName(i) + "  timestamp ,";
        


    }
    }
    else
    sql=sql+" " +rsMetaData.getColumnName(i) + "  " + rsMetaData.getColumnTypeName(i) + ",";





//	 System.out.println("Column Name :\n" + rsMetaData.getColumnName(i));
  //        System.out.println("   Column Type :\n" + rsMetaData.getColumnTypeName(i));
// 		System.out.println("Column size :\n" + rsMetaData.getPrecision(i)+"\t" + c);

     	   }sql=sql.substring(0,sql.lastIndexOf(","));
      System.out.println("sql query is \n"  +sql );
      }



String []oldcolumn=new String [columnCount];
       for(int i=1; i<=columnCount; i++) {
oldcolumn[i-1]=rsMetaData.getColumnName(i);
//System.out.println(oldcolumn[i-1]);
}
       //for(int i=1; i<=columnCount; i++) {
       //rsMetaData.g;
       //}
sqlbatch =new String [countrow +2];

countrow=0;
if(prim.equalsIgnoreCase(""))
sql=sql+""+")";
else
sql=sql+","+"Primary Key("+prim+"))";
//System.out.println(sql);
sqlbatch[countrow++]="ora";
sqlbatch[countrow++]=sql;

//st.addBatch(sql);
//System.out.println(fragmentqueries[counts]);
ResultSet rs=fst.executeQuery("select * from " + table);	//fragmentation query

rsMetaData = (OracleResultSetMetaData)rs.getMetaData();
columnCount=rsMetaData.getColumnCount();


while(rs.next())
{

String sqlv="";			//insert into "+ queryontable+" (" +rsMetaData.getColumnName(1)+"";
sql="";
boolean prevnul=false;

//now the values
String gt=null;
String val=null;

//System.out.println("value" + val+"\t ");
/*
if (val=="null" || val=="" || val==null || val.equalsIgnoreCase("") || val.equalsIgnoreCase("null") || val.equalsIgnoreCase(null))
{sql=sql+"";
sqlv="insert into "+ queryontable+" (" + "";
prevnul=true;
}else
{
sqlv="insert into " + queryontable+ " (" +rsMetaData.getColumnName(1)+"";
prevnul=false;
gt=rsMetaData.getColumnTypeName(1);
if(gt.equalsIgnoreCase("varchar") || gt.equalsIgnoreCase("varchar2")||gt.equalsIgnoreCase("nvarchar") || gt.equalsIgnoreCase("string") || gt.equalsIgnoreCase("text") || gt.equalsIgnoreCase("clob")|| gt.equalsIgnoreCase("datetime")|| gt.equalsIgnoreCase("number")|| gt.equalsIgnoreCase("time")|| gt.equalsIgnoreCase("date"))
sql=sql+"" +  "'"+val+"'"+"";
else
sql=sql+"" +val+"";
}


for(int g=2;g<=columnCount;g++)
{


gt=rsMetaData.getColumnTypeName(g);
val=rs.getString(g);
//System.out.println("value" + val + "g " + g);
if (val=="null" || val=="" || val==null)
{
    if((!prevnul) && g!=columnCount)
    {sqlv=sqlv+",";sql=sql+",";}
    prevnul=true;
}
else
{
if(prevnul)
{sqlv=sqlv+""+rsMetaData.getColumnName(g)+"";

prevnul=false;
if(gt.equalsIgnoreCase("varchar") || gt.equalsIgnoreCase("varchar2")||gt.equalsIgnoreCase("nvarchar")  || gt.equalsIgnoreCase("string") || gt.equalsIgnoreCase("text") || gt.equalsIgnoreCase("clob")|| gt.equalsIgnoreCase("datetime")|| gt.equalsIgnoreCase("time")|| gt.equalsIgnoreCase("date"))
sql=sql+"" + "'"+val+"'"+"";
else
sql=sql+"" +val+"";

}else
{sqlv=sqlv+" ,"+rsMetaData.getColumnName(g)+"";
prevnul=false;
if(gt.equalsIgnoreCase("varchar") || gt.equalsIgnoreCase("varchar2")||gt.equalsIgnoreCase("nvarchar")  || gt.equalsIgnoreCase("string") || gt.equalsIgnoreCase("text") || gt.equalsIgnoreCase("clob")|| gt.equalsIgnoreCase("datetime")|| gt.equalsIgnoreCase("time")|| gt.equalsIgnoreCase("date"))
sql=sql+"" + ","+""+ "'"+val+"'"+"";
else
sql=sql+""+"," +val+"";
}}
}

sql=sql+""+")";
sqlv=sqlv+" " + ")  values (";
*/

sqlv="insert into "+ queryontable+" (";
for(int g=1;g<=columnCount;g++)
{
gt=rsMetaData.getColumnTypeName(g);
val=rs.getString(g);



if(gt.equalsIgnoreCase("varchar") || gt.equalsIgnoreCase("varchar2")||gt.equalsIgnoreCase("nvarchar")  || gt.equalsIgnoreCase("string") || gt.equalsIgnoreCase("text") || gt.equalsIgnoreCase("clob"))
{
    val=rs.getString(g);
if (val==null)
{
   continue;
}else
{       sqlv=sqlv+""+rsMetaData.getColumnName(g)+",";
        sql=sql+"" + "'"+val+"'"+",";
}
}else if (gt.equalsIgnoreCase("timestamp")|| gt.equalsIgnoreCase("time")|| gt.equalsIgnoreCase("date"))
{   sqlv=sqlv+""+rsMetaData.getColumnName(g)+",";
    sql=sql+"'" +rs.getTimestamp(g)+"',";
}else
{   sqlv=sqlv+""+rsMetaData.getColumnName(g)+",";
 sql=sql+"" + " "+val+" "+",";
}

}
//System.out.println("sq; " + sql);
//System.out.println("sqlv " + sqlv);

sql=sql.substring(0,sql.lastIndexOf(","));
sqlv=sqlv.substring(0, sqlv.lastIndexOf(","));
sql=sql+""+")";
sqlv=sqlv+" " + ")  values (";

sqlbatch[countrow]=sqlv+sql;
countrow++;
}
for (int j=0;j<countrow;j++)
{System.out.println("sql query's \n" + sqlbatch[j]);
}


//checking for stored procedures left
for(int k=0;k<ip.length;k++)
{
BufferedWriter wout=new BufferedWriter(new FileWriter(System.getProperty("user.dir")+"/system//tempcnffile.txt",true));
wout.write("Name-"+queryontable+","+database+";"); // write to localcnfg file
wout.newLine();
wout.write("UP-"+username+","+password+";");
wout.newLine();
wout.write("Frag-,;");
wout.newLine();
wout.write("Col-");
int p=0;
for (p=0;p<oldcolumn.length-1;p++)
{
wout.write(oldcolumn[p]+",");
}
wout.write(oldcolumn[p]);
wout.write(":"+	ip[k]+";");
wout.newLine();
wout.write("R:"+counts+";");
wout.newLine();
wout.close();
}

rsa.close();
rs.close();
st.close();
sta.close();
con.close();



} catch (Exception e) {
e.printStackTrace();
}
return sqlbatch;

}

    public String[] sqlfrag(String database,int counts,String password,String username,String ip[])
    {
        String []sqlbatch={};

 try{

 //database name
Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
String connectionUrl = "jdbc:sqlserver://localhost;databaseName="+database+";integratedSecurity=true"; // database name,password and username
Connection con = DriverManager.getConnection(connectionUrl,username,password);

Statement fst=con.createStatement();
Statement st=con.createStatement();

Statement sta=con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);

DatabaseMetaData dbmd =con.getMetaData();
                    String[] types = {"TABLE"};
                    ResultSet resultSet = dbmd.getTables(null, null, "%", types);
                    int count=0;
                     while (resultSet.next()) {count++;}

                    String tableName[]=new String[count];
                    count=0;
                    resultSet = dbmd.getTables(null, null, "%", types);
                    int countrow=0;

                    while (resultSet.next()) {
                    tableName[count] = resultSet.getString(3);
                    ResultSet rsa=sta.executeQuery("select * from " + tableName[count]); // table name
                    rsa.last();
                    countrow+=rsa.getRow();
                    System.out.println("total count " + countrow + " for table " + tableName[count]);
                    count++;
                    }
                    sqlbatch =new String [countrow +count+ 3];
                    countrow=0;
                    for(int h=0;h<tableName.length;h++)
                    {
                        dbmd =con.getMetaData();

                   // String[] types = {"TABLE"};
                    resultSet = null;
                    int contpri=0;
                    resultSet=dbmd.getPrimaryKeys(null, null,tableName[h]);
                    while (resultSet.next()) {contpri++;}
                    String [] primary=null;
                    if(contpri!=0)
                    primary=new String [contpri];
                    contpri=0;
                    resultSet=dbmd.getPrimaryKeys(null, null, tableName[h]);
                    while (resultSet.next())
                    {
                    primary[contpri++]=resultSet.getString(4);
                    for (int i=1;i<=6;i++)
                    {//System.out.println("pi " + resultSet.getString(i));
                    }
                    }

String prim="";
if (primary!=null)
{
    if(primary.length>1)
    {prim+=primary[0]+",";
    for(int k=1;k<(primary.length-1);k++)
    prim+=primary[k]+","+"";
    prim+=primary[primary.length-1]+"";
    }
    else
    {
    prim+=primary[0];
    }
    System.out.println("primary" + prim);
}
ResultSet rsa=null;
String queryontable=tableName[h]; //change this to table
rsa=sta.executeQuery("select * from " + tableName[h]);
SQLServerResultSetMetaData rsMetaData = (SQLServerResultSetMetaData) rsa.getMetaData();

String sql="create table  " +queryontable+   "("; //get the table name by splitting the query string;
int columnCount =0;
int c=1;

    if (rsMetaData == null) {

        System.out.println("	");

      } else {

        columnCount = rsMetaData.getColumnCount();

       // System.out.println("Number of Columns in the table : " + columnCount);

String typ="";
int pre=0;
for(int i=1; i<=columnCount; i++) {



    if(!(typ=rsMetaData.getColumnTypeName(i)).equalsIgnoreCase("int"))
    {
    pre=rsMetaData.getPrecision(i);
    if(pre!=0 && !(pre<=0))
    sql=sql+" " + rsMetaData.getColumnName(i) + "  " + typ +"(" +pre+")"+" , ";
    else
    {   if(rsMetaData.getColumnTypeName(i).equalsIgnoreCase("date") || rsMetaData.getColumnTypeName(i).equalsIgnoreCase("timestamp") || rsMetaData.getColumnTypeName(i).equalsIgnoreCase("time"))
        sql=sql+" " +rsMetaData.getColumnName(i) + "  timestamp ,";
    }
    }
    else
    sql=sql+" " +rsMetaData.getColumnName(i) + "  " + rsMetaData.getColumnTypeName(i) + ",";





//	 System.out.println("Column Name :\n" + rsMetaData.getColumnName(i));
  //        System.out.println("   Column Type :\n" + rsMetaData.getColumnTypeName(i));
// 		System.out.println("Column size :\n" + rsMetaData.getPrecision(i)+"\t" + c);

     	   }sql=sql.substring(0,sql.lastIndexOf(","));
      //System.out.println("sql query is \n"  +sql );
      }



String []oldcolumn=new String [columnCount];
       for(int i=1; i<=columnCount; i++) {
oldcolumn[i-1]=rsMetaData.getColumnName(i);
//System.out.println(oldcolumn[i-1]);
}
       //for(int i=1; i<=columnCount; i++) {
       //rsMetaData.g;
       //}

if(prim.equalsIgnoreCase(""))
sql=sql+""+")";
else
sql=sql+","+"Primary Key("+prim+"))";

 //System.out.println(sql);

if(h==0)
{
    sqlbatch[countrow++]="sql"; //+ database;
    sqlbatch[countrow++]="create database "+database+"$R";
    sqlbatch[countrow++]="use "+database+"$R";//+database; //+ database;
}
sqlbatch[countrow++]=sql;

ResultSet rs=fst.executeQuery("select * from " + queryontable);	//fragmentation query

rsMetaData =            (SQLServerResultSetMetaData) rs.getMetaData();
columnCount=rsMetaData.getColumnCount();


while(rs.next())
{

String sqlv="";			//insert into "+ queryontable+" (" +rsMetaData.getColumnName(1)+"";
sql="";
boolean prevnul=false;

//now the values
String gt=null;
String val=null;

//System.out.println("value" + val+"\t ");
/*
if (val=="null" || val=="" || val==null || val.equalsIgnoreCase("") || val.equalsIgnoreCase("null") || val.equalsIgnoreCase(null))
{sql=sql+"";
sqlv="insert into "+ queryontable+" (" + "";
prevnul=true;
}else
{
sqlv="insert into " + queryontable+ " (" +rsMetaData.getColumnName(1)+"";
prevnul=false;
gt=rsMetaData.getColumnTypeName(1);
if(gt.equalsIgnoreCase("varchar") || gt.equalsIgnoreCase("varchar2")||gt.equalsIgnoreCase("nvarchar") || gt.equalsIgnoreCase("string") || gt.equalsIgnoreCase("text") || gt.equalsIgnoreCase("clob")|| gt.equalsIgnoreCase("datetime")|| gt.equalsIgnoreCase("number")|| gt.equalsIgnoreCase("time")|| gt.equalsIgnoreCase("date"))
sql=sql+"" +  "'"+val+"'"+"";
else
sql=sql+"" +val+"";
}


for(int g=2;g<=columnCount;g++)
{


gt=rsMetaData.getColumnTypeName(g);
val=rs.getString(g);
//System.out.println("value" + val + "g " + g);
if (val=="null" || val=="" || val==null)
{
    if((!prevnul) &&  g!=columnCount)
    {sqlv=sqlv+",";sql=sql+",";}
    prevnul=true;
}
else
{
if(prevnul)
{sqlv=sqlv+""+rsMetaData.getColumnName(g)+"";

prevnul=false;
if(gt.equalsIgnoreCase("varchar") || gt.equalsIgnoreCase("varchar2")||gt.equalsIgnoreCase("nvarchar")  || gt.equalsIgnoreCase("string") || gt.equalsIgnoreCase("text") || gt.equalsIgnoreCase("clob")|| gt.equalsIgnoreCase("datetime")|| gt.equalsIgnoreCase("time")|| gt.equalsIgnoreCase("date"))
sql=sql+"" + "'"+val+"'"+"";
else
sql=sql+"" +val+"";

}else
{sqlv=sqlv+" ,"+rsMetaData.getColumnName(g)+"";
prevnul=false;
if(gt.equalsIgnoreCase("varchar") || gt.equalsIgnoreCase("varchar2")||gt.equalsIgnoreCase("nvarchar")  || gt.equalsIgnoreCase("string") || gt.equalsIgnoreCase("text") || gt.equalsIgnoreCase("clob")|| gt.equalsIgnoreCase("datetime")|| gt.equalsIgnoreCase("time")|| gt.equalsIgnoreCase("date"))
sql=sql+"" + ","+""+ "'"+val+"'"+"";
else
sql=sql+""+"," +val+"";
}}
}
sql=sql+""+")";
sqlv=sqlv+" " + ")  values (";
*/


sqlv="insert into "+ queryontable+" (";
for(int g=1;g<=columnCount;g++)
{
gt=rsMetaData.getColumnTypeName(g);
val=rs.getString(g);



if(gt.equalsIgnoreCase("varchar") || gt.equalsIgnoreCase("varchar2")||gt.equalsIgnoreCase("nvarchar")  || gt.equalsIgnoreCase("string") || gt.equalsIgnoreCase("text") || gt.equalsIgnoreCase("clob"))
{
    val=rs.getString(g);
if (val=="null" || val=="" || val==null)
{
   continue;
}else
{       sqlv=sqlv+""+rsMetaData.getColumnName(g)+",";
        sql=sql+"" + "'"+val+"'"+",";
}
}else if (gt.equalsIgnoreCase("timestamp")|| gt.equalsIgnoreCase("time")|| gt.equalsIgnoreCase("date"))
{   sqlv=sqlv+""+rsMetaData.getColumnName(g)+",";
    sql=sql+"'" +rs.getTimestamp(g)+"',";
}else
{sqlv=sqlv+""+rsMetaData.getColumnName(g)+",";
 sql=sql+"" + " "+val+" "+",";
}

}
//System.out.println("sq; " + sql);
//System.out.println("sqlv " + sqlv);

sql=sql.substring(0,sql.lastIndexOf(","));
sqlv=sqlv.substring(0, sqlv.lastIndexOf(","));
sql=sql+""+")";
sqlv=sqlv+" " + ")  values (";




//System.out.println("sql query is \n"  +sqlv+sql );



//st.addBatch(sqlv+sql);
sqlbatch[countrow++]=sqlv+sql;
}//end of while

//st.executeBatch();
rsa.close();
rs.close();

                    }//end of for loop


for (int j=0;j<sqlbatch.length;j++)
{System.out.println("sql " + sqlbatch[j]);
}
//checking for stored procedures left

//sql=sqlbatch;
//sqlbatch[countrow++]="sql";
BufferedWriter wout=new BufferedWriter(new FileWriter(System.getProperty("user.dir")+"/system//tempcnffile.txt",true));

for (int i=0;i<ip.length;i++)
{
for(int k=0;k<tableName.length;k++)
{
ResultSetMetaData rs=con.createStatement().executeQuery("select * from " + tableName[k]).getMetaData();
    
wout.write("Name-"+tableName[k]+","+database+"$R.mdf;"); // write to localcnfg file
wout.newLine();
wout.write("UP-"+username+","+password+";");
wout.newLine();
wout.write("Frag-,;");
wout.newLine();
wout.write("Col-");
String cols="";
for(int j=1;j<=rs.getColumnCount();j++)
{
cols+=rs.getColumnName(j)+",";
}
cols=cols.substring(0, cols.lastIndexOf(","));
wout.write(cols+":"+	ip[i]+";");
wout.newLine();
wout.write("R:" +counts+";");
wout.newLine();

}
}
wout.close();

st.close();
sta.close();
con.close();

}catch(Exception e){e.printStackTrace();}
return sqlbatch;




 }

    public boolean checktableexist(String username,String pass,int type,String database,String [] ip)
    {   boolean ret=false;
        try{
    if(type==3)//sql
    {
    Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
String conStro = "jdbc:odbc:Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=" +  new File(System.getProperty("user.dir")+"/access/"+database).getAbsolutePath();
Connection con=DriverManager.getConnection(conStro,username,pass);		//password

DatabaseMetaData dbmd = con.getMetaData();
String[] types = {"TABLE"};
ResultSet resultSet = dbmd.getTables(null, null, "%", types);
int count=0;
while (resultSet.next()) {

    if(new Systemfunction().tableexistatip(resultSet.getString(3), ip))
{
    ret=true;
break;
}
}
    
}//end of sql==1
    else if(type==2)
    {
        
    System.out.println(" table compare " + database  + " ip  " + ip);
    if(new Systemfunction().tableexistatip(database, ip))
    ret=true;
    }else if(type==1)
    {
    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
    String connectionUrl = "jdbc:sqlserver://localhost;databaseName="+database+";integratedSecurity=true"; // database name,password and username
    Connection con = DriverManager.getConnection(connectionUrl,username,pass);
    DatabaseMetaData dbmd =con.getMetaData();
                    String[] types = {"TABLE"};
                    ResultSet resultSet = dbmd.getTables(null, null, "%", types);
                    int count=0;
                     while (resultSet.next()) {if(new Systemfunction().tableexistatip(resultSet.getString(3), ip))
{ret=true;
break;
}}


    }


        }catch(Exception e){e.printStackTrace();}
    return ret;
    }

    /**
    * @param args the command line arguments
    */




    /*
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Replication().setVisible(true);
            }
        });
    }

    */




    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList dfl;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JList load;
    // End of variables declaration//GEN-END:variables
String read="";
String usrnam="";
String pas="";
String filenam="";
String fileext="";
char [] pass=null;
String database="";
String ip1[]={};
String ip[]={};
 int nf=0;
 String file="";
 JTextField [] jfq=new JTextField[nf];
 JComboBox [] ip1l=new  JComboBox[nf];
JFrame frame=this;
}
