/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Main.java
 *
 * Created on 19 Feb, 2011, 7:29:54 PM
 */
package hdds;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.net.ServerSocket;
import java.sql.Connection;
import java.sql.DriverManager;
import java.util.Enumeration;
import java.util.Properties;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JWindow;
import javax.swing.plaf.basic.BasicArrowButton;

/**
 *
 * @author Harsh
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    public Main() {
        try {

            System.out.println("cwd " + System.getProperty("user.dir"));

            File src = new File(System.getProperty("user.dir") + "/src//hdds//access//default.accdb");

            if (src.exists()) {
                System.setProperty("user.dir", (System.getProperty("user.dir") + "/src/hdds/"));
            } else if (new File(System.getProperty("user.dir") + "//hdds//access//default.accdb").exists()) {
                System.setProperty("user.dir", (System.getProperty("user.dir") + "/hdds/"));
            }

           //System.setProperty("user.dir", "C:\\Program Files (x86)\\Java\\jdk1.6.0_02\\bin\\hdds\\");
            //File pic=new File("pics/main.png");
            //if(pic.exists())
            // System.out.println("pic" + pic.getParentFile().getParentFile().toString());
            System.out.println("cwd " + System.getProperty("user.dir"));
           //System.out.println("file" + src.getAbsolutePath().toString());
            //String lib1=System.getProperty("user.dir")+"lib/ojdbc14.jar";

         //lib1=lib1.replaceAll("\\\\", "/");
            //System.out.println("string " + lib1);
            //System.loadLibrary(lib1);
            //System.setProperty("java.class", lib1)
            //System.loadLibrary("C:/Users/Harsh/Documents/NetBeansProjects/HDDS/src/hdds/lib/ojdbc14.jar");
            //System.setProperty("java.class.path", System.getProperty("user.dir") + "/lib/ojdbc14.jar");
            System.setProperty("java.class.path", System.getProperty("user.dir") + "/lib/sqljdbc4.jar");
            System.setProperty("java.class.path", System.getProperty("user.dir") + "/lib/ojdbc14.jar");
           // System.get
            // System.load(System.getProperty("user.dir")+ "/lib/ojdbc14.jar");
            //System.load(System.getProperty("user.dir")+ "/lib/sqljdbc4.jar");
            //System.out.println("cwd " + System.setProperty("user.dir",System.getProperty("user.dir"));
          /*
             Properties pp=System.getProperties();
             Enumeration obj=pp.propertyNames();
             Enumeration val=pp.elements();

             for(int i=0;obj.hasMoreElements();i++)
             System.out.println(obj.nextElement()+ " "+ val.nextElement());
             */
            boolean ok = checkports();
            if (ok) {
                //load();
                initComponents();
                panelimage();
                initialize();
                delete();
                showbutton();
                buttoninitialize();
                back();
            } else {
                String err[] = {"Could not initialize ports please make sure ports 5554 to 5559 are available", "Make sure u have the lastest version of microsoft office installed"};
                errorcheck(err);
                this.setVisible(false);
                this.dispose();
                System.exit(0);

            //System.out.println("error from mainform");
            }

        } catch (Exception e) {
            e.printStackTrace();
            System.exit(0);

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("HDDS");
        setBounds(new java.awt.Rectangle(0, 0, 600, 600));
        setResizable(false);

        jPanel1.setPreferredSize(new java.awt.Dimension(800, 700));
        jPanel1.setRequestFocusEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 799, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 696, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 799, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 696, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        if (!checksystem()) {
            if (fobj == null) {
                fobj = new Fragment();
                fobj.setLocationRelativeTo(this);
                fobj.setVisible(true);
            } else {
                fobj.dispose();
                fobj = new Fragment();
                fobj.setLocationRelativeTo(this);

                fobj.setVisible(true);
            }// TODO add your handling code here:
        } else {
            String err[] = {"No System files found.Please perform setup first to continue"};
            errorcheck(err);
        }
    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
        if (!checksystem()) {

            if (robj == null) {
                robj = new Replication();
                robj.setLocationRelativeTo(this);
                robj.setVisible(true);
            } else {
                robj.dispose();
                robj = new Replication();
                robj.setLocationRelativeTo(this);

                robj.setVisible(true);
            }
        } else {
            String err[] = {"No System files found.Please perform setup first to continue"};
            errorcheck(err);
        }// TODO add your handling code here:
    }

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {
        if (!checksystem()) {
            if (qobj == null) {
                qobj = new QueryGUI();
                qobj.setLocationRelativeTo(this);
                qobj.setVisible(true);
            } else {
                qobj.dispose();
                qobj = new QueryGUI();
                qobj.setLocationRelativeTo(this);
                qobj.setVisible(true);
            }
        } else {
            String err[] = {"No System files found.Please perform setup first to continue"};
            errorcheck(err);
        }// TODO add your handling code here:
    }

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {

        if (sobj == null) {
            sobj = new Setup();

            sobj.setLocationRelativeTo(this);
            sobj.setVisible(true);
        } else {
            sobj.dispose();
            sobj = null;
            sobj = new Setup();
            sobj.setLocationRelativeTo(this);

            sobj.setVisible(true);

        }
    }

    private void panelimage() {
        jPanel1.setSize(this.getSize());
        east.setSize(40, 40);
        west.setSize(40, 40);
        east.setVisible(true);
        west.setVisible(true);

        jPanel1.add(east);
        jPanel1.add(west);
        east.setLocation(450, 75);
        west.setLocation(200, 75);

        east.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                jButton1.setVisible(false);
                jButton2.setVisible(false);
                jButton3.setVisible(false);
                jButton5.setVisible(false);

                int y1 = x[0].getY() + 50;
                int y2 = x[1].getY() + 50;
                int y3 = x[2].getY() + 50;
                int y4 = x[3].getY() + 50;
                // System.out.println(y1 + " y2 " + y2);
                int newx1 = 0;
                int newx2 = 0;
                int newx3 = 0;
                int newx4 = 0;
                boolean s1 = true;
                boolean s2 = true;
                boolean s3 = true;
                boolean s4 = true;
                int radius = 250 * 250;

                while (true) {
                    if (y1 <= 350) {
                        s1 = false;
                        int sq = (y1 - 350) * (y1 - 350);

                        newx1 = (int) (325 - (Math.sqrt(radius - sq)));
                        x[0].setLocation(newx1 - 25, y1 - 50);
                        y1++;

                    }
                    if (y2 >= 100 /*&& newx2!=325*/) {
                        s2 = false;
                        int sq = (y2 - 350) * (y2 - 350);
                        newx2 = (int) (325 + (Math.sqrt(radius - sq)));
                        x[1].setLocation(newx2 - 25, y2 - 50);

                        y2--;

                    }
                    if (y3 >= 350 /*&& newx3!=50*/) {
                        s3 = false;
                        int sq = (y3 - 350) * (y3 - 350);
                        newx3 = (int) (325 + (Math.sqrt(radius - sq)));

                        x[2].setLocation(newx3 - 25, y3 - 50);

                        y3--;
                    }

                    if (y4 <= 600 /*&& newx4!=325*/) {
                        s4 = false;
                        int sq = (y4 - 350) * (y4 - 350);
                        newx4 = (int) (325 - (Math.sqrt(radius - sq)));
                        x[3].setLocation(newx4 - 25, y4 - 50);

                        y4++;
                    }
                    //jPanel1.update(jPanel1.getGraphics());

                    if (s1 && s2 && s3 && s4) {

                        x[0].setLocation(50, 300);
                        x[1].setLocation(300, 50);
                        x[2].setLocation(550, 300);
                        x[3].setLocation(300, 550);
                        jPanel1.update(jPanel1.getGraphics());

                        break;

                    }
                    s1 = true;
                    s2 = true;
                    s3 = true;
                    s4 = true;

                    jPanel1.update(jPanel1.getGraphics());

                }
                JPanel temp = null;
                temp = x[1];
                x[1] = x[2];
                x[2] = x[3];

                x[3] = x[0];

                x[0] = temp;
                showbutton();

            }
        });
        west.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {

                jButton1.setVisible(false);
                jButton2.setVisible(false);
                jButton3.setVisible(false);
                jButton5.setVisible(false);

                int y1 = x[0].getY() + 50;
                int y2 = x[1].getY() + 50;
                int y3 = x[2].getY() + 50;
                int y4 = x[3].getY() + 50;
                // System.out.println(y1 + " y2 " + y2);
                int newx1 = 0;
                int newx2 = 0;
                int newx3 = 0;
                int newx4 = 0;
                boolean s1 = true;
                boolean s2 = true;
                boolean s3 = true;
                boolean s4 = true;
                int radius = 250 * 250;

                while (true) {
                    if (y1 != 350) {
                        s1 = false;
                        int sq = (y1 - 350) * (y1 - 350);
                        newx1 = (int) (325 + (Math.sqrt(radius - sq)));
                        x[0].setLocation(newx1 - 25, y1 - 50);
                        y1++;

                    }
                    if (y2 <= 600 /*&& newx2!=325*/) {
                        s2 = false;

                        int sq = (y2 - 350) * (y2 - 350);
                        newx2 = (int) (325 + (Math.sqrt(radius - sq)));
                        x[1].setLocation(newx2 - 25, y2 - 50);

                        y2++;

                    }
                    if (y3 >= 350 /*&& newx3!=50*/) {
                        s3 = false;

                        int sq = (y3 - 350) * (y3 - 350);
                        newx3 = (int) (325 - (Math.sqrt(radius - sq)));

                        x[2].setLocation(newx3 - 25, y3 - 50);

                        y3--;
                    }

                    if (y4 >= 100 /*&& newx4!=325*/) {
                        s4 = false;

                        int sq = (y4 - 350) * (y4 - 350);
                        newx4 = (int) (325 - (Math.sqrt(radius - sq)));
                        x[3].setLocation(newx4 - 25, y4 - 50);

                        y4--;
                    }
                    jPanel1.update(jPanel1.getGraphics());

                    if (s1 && s2 && s3 && s4) {

                        x[0].setLocation(550, 300);
                        x[1].setLocation(300, 550);
                        x[2].setLocation(50, 300);
                        x[3].setLocation(300, 50);
                        jPanel1.update(jPanel1.getGraphics());

                        break;

                    }
                    s1 = true;
                    s2 = true;
                    s3 = true;
                    s4 = true;
  // jPanel1.update(jPanel1.getGraphics());
                    //jPanel1.paintAll(jPanel1.getGraphics());

                }
                JPanel temp = null;
                temp = x[1];
                x[1] = x[0];
                x[0] = x[3];

                x[3] = x[2];

                x[2] = temp;
                showbutton();

            }
        });
        ImageIcon iconlo = new ImageIcon(System.getProperty("user.dir") + "/pics\\logo.png");

        JPanel jPanel2 = new JPanel();
        JPanel jPanel3 = new JPanel();
        JPanel jPanel4 = new JPanel();
        JPanel jPanel5 = new JPanel();

        jPanel2.setName("setup");
        jPanel3.setName("frag");
        jPanel4.setName("replica");
        jPanel5.setName("query");

        ImageIcon icon = new ImageIcon(System.getProperty("user.dir") + "/pics\\setup.jpg");
        jPanel2.setSize(icon.getIconWidth(), icon.getIconHeight());

        JLabel label = new JLabel();
        label.setIcon(icon);
        label.setSize(icon.getIconWidth(), icon.getIconHeight());
        label.setVisible(true);
        jPanel2.add(label);
        jPanel2.setVisible(true);

        ImageIcon icon1 = new ImageIcon(System.getProperty("user.dir") + "/pics\\frag.png");
        jPanel3.setSize(icon1.getIconWidth(), icon1.getIconWidth());
        JLabel label1 = new JLabel();
        label1.setIcon(icon1);
        label1.setSize(icon1.getIconWidth(), icon1.getIconWidth());
        label1.setVisible(true);
        jPanel3.add(label1);

        jPanel3.setVisible(true);

        ImageIcon icon3 = new ImageIcon(System.getProperty("user.dir") + "/pics\\replica.png");
        jPanel4.setSize(icon3.getIconWidth(), icon3.getIconWidth());

        JLabel label3 = new JLabel();
        label3.setIcon(icon3);
        label3.setSize(icon3.getIconWidth(), icon3.getIconWidth());
        label3.setVisible(true);
        jPanel4.add(label3);
        jPanel4.setVisible(true);

        ImageIcon icon4 = new ImageIcon(System.getProperty("user.dir") + "/pics\\databases.png");
        jPanel5.setSize(icon4.getIconWidth(), icon4.getIconWidth());

        JLabel label4 = new JLabel();
        label4.setIcon(icon4);
        label4.setSize(icon4.getIconWidth(), icon4.getIconWidth());
        label4.setVisible(true);
        jPanel5.add(label4);
        jPanel5.setVisible(true);

        jPanel1.add(jPanel2);
        jPanel1.add(jPanel3);
        jPanel1.add(jPanel4);
        jPanel1.add(jPanel5);

        jPanel1.update(jPanel1.getGraphics());
        jPanel2.update(jPanel2.getGraphics());

        jPanel3.update(jPanel3.getGraphics());
        jPanel4.update(jPanel4.getGraphics());
        jPanel5.update(jPanel5.getGraphics());

        jPanel2.setLocation(300, 50);
        jPanel3.setLocation(550, 300);
        jPanel4.setLocation(300, 550);
        jPanel5.setLocation(50, 300);

        x[0] = jPanel2;
        x[1] = jPanel3;
        x[2] = jPanel4;
        x[3] = jPanel5;

        jPanel1.add(jButton1);

        jPanel1.add(jButton2);
        jPanel1.add(jButton3);
        jPanel1.add(jButton5);

        jButton1.setSize(100, 40);
        jButton2.setSize(100, 40);
        jButton3.setSize(100, 40);
        jButton5.setSize(100, 40);

        jButton1.setVisible(false);
        jButton2.setVisible(false);
        jButton3.setVisible(false);
        jButton5.setVisible(false);

        jPanel1.update(jPanel1.getGraphics());

    }

    public boolean checkports() {
        boolean ok = true;
        try {
            ServerSocket srvr = new ServerSocket(4370);
            srvr.close();
            srvr = new ServerSocket(4380);
            srvr.close();
            srvr = new ServerSocket(8181);
            srvr.close();
            srvr = new ServerSocket(8686);
            srvr.close();
            srvr = new ServerSocket(17603);
            srvr.close();
            srvr = new ServerSocket(17600);
            srvr.close();
            File def = new File(System.getProperty("user.dir") + "/access/default.accdb");
            System.out.println("def" + def.getAbsolutePath().toString());
            String connectionUrl = "jdbc:odbc:Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=" + def.getPath();
            Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
            Connection con = DriverManager.getConnection(connectionUrl, "", "");
            con.close();
            def = null;
        } catch (Exception e) {
            e.printStackTrace();
            ok = false;
        }
        return ok;
    }

    public void initialize() {
        try {
            Communicate ss = new Communicate();
            new rectransferofarray().start();
            new recfiletransfer().start();
            new recqueryarray().start();
            ss.start();
            //check if initiate ports open
        } catch (Exception e) {
        //e.printStackTrace();
            //throww error for ports not open
        }
    }

    public void delete() {
        File dir = new File(System.getProperty("user.dir") + "//temp//");
        File[] temp = dir.listFiles();
        for (int i = 0; i < temp.length && temp[i] != null; i++) {
            temp[i].delete();
        }
        dir = null;
        dir = new File(System.getProperty("user.dir") + "//access//temp//");
        temp = dir.listFiles();
        for (int i = 0; i < temp.length && temp[i] != null; i++) {
            temp[i].delete();
        }
        dir = null;
        dir = new File(System.getProperty("user.dir") + "//backup_system//");
        temp = dir.listFiles();
        for (int i = 0; i < temp.length && temp[i] != null; i++) {
            temp[i].delete();
        }
        dir = null;
        File tcnf = new File(System.getProperty("user.dir") + "/system//tempcnffile.txt");
        tcnf.delete();
        File cnfcop = new File(System.getProperty("user.dir") + "/system//cnfcopy.txt");
        if (cnfcop.exists()) {
            cnfcop.delete();
        }
        File cnfarvd = new File(System.getProperty("user.dir") + "/system//cnffile.txtarivd");
        if (cnfarvd.exists()) {
            cnfarvd.delete();
        }
        cnfarvd = new File(System.getProperty("user.dir") + "/system//inf.txtarivd");
        if (cnfarvd.exists()) {
            cnfarvd.delete();
        }
        cnfarvd = new File(System.getProperty("user.dir") + "/system//newcnffile.txt");
        if (cnfarvd.exists()) {
            cnfarvd.delete();
        }

    }

    public boolean checksystem() {
        boolean err = false;
        try {
            File cnf = new File(System.getProperty("user.dir") + "/system//cnffile.txt");
            File localcnf = new File(System.getProperty("user.dir") + "/system//localcnffile.txt");
            File ipl = new File(System.getProperty("user.dir") + "/system//iplist.txt");
            File inf = new File(System.getProperty("user.dir") + "/system//inf.txt");
            File info = new File(System.getProperty("user.dir") + "/system//info.txt");

            if (!cnf.exists() || !localcnf.exists() || !ipl.exists() || !inf.exists() || !info.exists()) {
                err = true;
            } else {/*
                 BufferedReader cin=new BufferedReader(new FileReader(cnf));
                 String read=cin.readLine();
                 if(read==null)
                 {err=true;
                 System.out.println("1");
                 }cin=new BufferedReader(new FileReader(localcnf));
                 read=cin.readLine();
                 if(read==null)
                 {err=true;
                 System.out.println("2");

                 }
                 */

                BufferedReader cin = new BufferedReader(new FileReader(ipl));
                String read = cin.readLine();
                if (read == null) {
                    err = true;
                    System.out.println("3");

                }
                cin = new BufferedReader(new FileReader(inf));
                read = cin.readLine();
                if (read == null) {
                    err = true;
                    System.out.println("4");

                }
                cin = new BufferedReader(new FileReader(info));
                read = cin.readLine();
                if (read == null) {
                    err = true;
                    System.out.println("5");
                }
                cin.close();
            }
            cnf = null;
            localcnf = null;
            ipl = null;
            inf = null;
            info = null;
        } catch (Exception e) {
            e.printStackTrace();
            err = true;
        }
        return err;
    }

    public boolean errorcheck(String err[])//dialog box
    {
        //System.out.println("Message  sadasd" +err.length );
        boolean cont = true;

        final JDialog errorBox = new JDialog(this, "Error", JDialog.ModalityType.APPLICATION_MODAL);
        errorBox.setLayout(new GridBagLayout());

        GridBagConstraints c = new GridBagConstraints();
        c.gridwidth = 3;
        System.out.println("error length" + err.length);
        JLabel lbl[] = new JLabel[err.length];
        int g = 0;
        for (g = 0; g < err.length && err[g] != null; g++) {
            if (!err[g].equalsIgnoreCase("false")) {

                lbl[g] = new JLabel(err[g]);
                c.fill = GridBagConstraints.HORIZONTAL;
                c.weightx = 0.5;
                c.ipadx = 0;
                c.ipady = 10;
                c.gridx = 1;
                c.gridy = g;

                lbl[g].setSize(100, 30);
                lbl[g].setVisible(true);
                errorBox.add(lbl[g], c);

                System.out.println("Message " + g + "   " + err[g]);
                cont = false;
            }
            /*else
             {
             Message="Correct Query";
             }*/
        }
        JButton button1 = new JButton("ok");
//c.fill = GridBagConstraints.HORIZONTAL;
        c.weightx = 0.5;
        c.ipadx = 0;
        c.ipady = 10;
        c.gridx = 2;
        c.gridy = (++g + 2);
        c.gridwidth = 2;
        c.anchor = GridBagConstraints.CENTER;
        c.fill = GridBagConstraints.NONE;

        button1.setSize(50, 50);

        button1.setMaximumSize(new Rectangle(50, 50).getSize());

        //button1.setBounds(200,200,70, 50);
        button1.setVisible(true);
        errorBox.add(button1, c);
        button1.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {

                //throw new UnsupportedOperationException("Not supported yet.");
                errorBox.dispose();

            }
        });
        errorBox.pack();
        //errorBox.setSize(500,300);
        errorBox.setResizable(false);
        errorBox.setLocationRelativeTo(this.getContentPane());
        if (!cont) {
            errorBox.setVisible(true);
        }

        return cont;
    }

    public void showbutton() {
        if (x[0].getName().equalsIgnoreCase("setup")) {

            jButton5.setLocation(x[0].getX(), x[0].getY() + x[0].getHeight() + 5);
            // System.out.println("x" + x[0].getX() + " y "+ x[0].getY()+x[0].getHeight()+5);
            jButton5.setVisible(true);
            jPanel1.update(jPanel1.getGraphics());
        } else if (x[0].getName().equalsIgnoreCase("frag")) {
            jButton1.setLocation(x[0].getX(), x[0].getY() + x[0].getHeight() + 5);
            // System.out.println("x" + x[0].getX() + " y "+ x[0].getY()+x[0].getHeight()+5);
            jButton1.setVisible(true);
            jPanel1.update(jPanel1.getGraphics());
        } else if (x[0].getName().equalsIgnoreCase("replica")) {
            jButton2.setLocation(x[0].getX(), x[0].getY() + x[0].getHeight() + 5);
            // System.out.println("x" + x[0].getX() + " y "+ x[0].getY()+x[0].getHeight()+5);
            jButton2.setVisible(true);
            jPanel1.update(jPanel1.getGraphics());
        } else if (x[0].getName().equalsIgnoreCase("query")) {
            jButton3.setLocation(x[0].getX(), x[0].getY() + x[0].getHeight() + 5);
            // System.out.println("x" + x[0].getX() + " y "+ x[0].getY()+x[0].getHeight()+5);
            jButton3.setVisible(true);
            jPanel1.update(jPanel1.getGraphics());
        }

    }

    public void load() {

        JWindow win = new JWindow();
        JPanel jp = new JPanel();
        ImageIcon ic = new ImageIcon(System.getProperty("user.dir") + "/pics/logo.png");
        JLabel ll = new JLabel();
        ll.setIcon(ic);
        ll.setSize(ic.getIconWidth(), ic.getIconHeight());
        ll.setVisible(true);
        jp.setSize(ll.getSize());
        jp.add(ll);
        jp.setVisible(true);
        win.add(jp);
        win.pack();

        //System.out.println("win " + win.getLocation().getX());
        Dimension scs = Toolkit.getDefaultToolkit().getScreenSize();

        win.setLocation(((int) scs.getWidth() / 4), ((int) scs.getHeight() / 4));
        win.setVisible(true);
        win.update(win.getGraphics());

        try {
            Thread.sleep(3000);
        } catch (InterruptedException ex) {

        }
        win.setVisible(false);

    }

    public void buttoninitialize() {
        jButton1.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                jButton1ActionPerformed(e);
            }
        });
        jButton2.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                jButton2ActionPerformed(e);
            }
        });
        jButton3.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                jButton3ActionPerformed(e);
            }
        });
        jButton5.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                jButton5ActionPerformed(e);
            }
        });

    }

    public void back() {

        JLabel jl = new JLabel();
        ImageIcon ic = new ImageIcon(System.getProperty("user.dir") + "/pics/main.png");

        jl.setSize(ic.getIconWidth(), ic.getIconHeight());
        jl.setIcon(ic);
        jPanel1.add(jl);
        jl.setVisible(true);
        jPanel1.update(jPanel1.getGraphics());

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    JPanel x[] = new JPanel[4];
    JButton jButton1 = new JButton("Fragment");
    JButton jButton2 = new JButton("Replica");
    JButton jButton3 = new JButton("Query");
    JButton jButton5 = new JButton("Setup");
    Fragment fobj = null;
    Replication robj = null;
    Setup sobj = null;
    QueryGUI qobj = null;
    BasicArrowButton east = new BasicArrowButton(BasicArrowButton.EAST, new Color(0, 216, 255), Color.yellow, Color.white, Color.BLUE);
    BasicArrowButton west = new BasicArrowButton(BasicArrowButton.WEST, new Color(0, 216, 255), Color.yellow, Color.white, Color.BLUE);

}
