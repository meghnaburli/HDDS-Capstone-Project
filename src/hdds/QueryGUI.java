/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * QueryGUI.java
 *
 * Created on 19 Feb, 2011, 8:36:49 AM
 */

package hdds;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;

/**
 *
 * @author Harsh
 */
public class QueryGUI extends javax.swing.JFrame {

    /** Creates new form QueryGUI */
    public QueryGUI() {
        initComponents();
         new Systemfunction().addback(this);
        initializedatabasetree();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        query = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        result = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jToggleButton1 = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("QueryProcessing");
        setResizable(false);

        query.setColumns(20);
        query.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        query.setRows(5);
        query.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                queryKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(query);

        result.setColumns(20);
        result.setEditable(false);
        result.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        result.setRows(5);
        jScrollPane2.setViewportView(result);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Result");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Query");

        jTree1.setModel(null);
        jScrollPane3.setViewportView(jTree1);

        jToggleButton1.setText("Table");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToggleButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 529, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 529, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 529, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jToggleButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void queryKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_queryKeyReleased

        if(evt.getKeyCode()==117) // f6
        {
          try{
          result.setText("Executing");
          result.update(result.getGraphics());
          String qq=null;
          String eq=query.getSelectedText();
          int select=0;
          if(eq!=null && eq.contains(";") )
          qq=eq.trim().split(";")[0];
          System.out.println("query selected for execution" + qq);

                      if(qq!=null && qq.contains(" "))
                      {      
                              String quer="";
        String sql="";
        boolean inside=false;
        boolean brk=false;
        while(qq.length()>=1 && !brk)
        {
         int ind=qq.indexOf("'");
         System.out.println(" ind " + ind);
         if(ind!=-1)
         {quer=qq.substring(0, ind+1);
         if(!inside)
         quer=quer.toLowerCase();
         qq=qq.substring(ind+1,qq.length());
         sql+=quer+"";
         }
         else
         {quer=qq;
         brk=true;
         quer=quer.toLowerCase();
         sql+=quer+"";
         }
         inside=!inside;
        //System.out.println("sql "+qq +" quer "+quer);

        }
        qq=sql;
       System.out.println(" qq " +qq);
       
                             String err[]=null;
                             String word1=qq.split(" ")[0];
                             QueryProcessing obj=new QueryProcessing();
                             boolean isjoin=false;
                             if(qq.contains("from") && qq.contains("where"))
                             {if(qq.split("from")[1].split("where")[0].contains(","))//multiple tables
                             isjoin=true;
                             }else if(qq.contains("from") && !qq.contains("where"))
                             {if(qq.split("from")[1].contains(","))
                             isjoin=true;}

                             if(word1.equalsIgnoreCase("select") && !isjoin)
                             {err=obj.query_select(qq);
                             select=1;
                             }
                             else if(word1.equalsIgnoreCase("drop"))
                             {err=obj.query_drop(qq);
                             initializedatabasetree();
                             }
                             else if(word1.equalsIgnoreCase("truncate"))
                             err=obj.query_truncate(qq);
                             else if(word1.equalsIgnoreCase("insert"))
                             err=obj.query_insert(qq);
                             else if(word1.equalsIgnoreCase("delete"))
                             err=obj.query_delete(qq);
                             else if(word1.equalsIgnoreCase("create"))
                             {err=obj.query_create(qq);
                             initializedatabasetree();
                             }else if(word1.equalsIgnoreCase("update"))
                             err=obj.query_update(qq);
                             else if(word1.equalsIgnoreCase("select") && isjoin)
                             {err=obj.query_join(qq);
                             select=1;
                             }else
                                 result.setText("No such Query");
                              //   System.out.println("select " + select + err[0]);
                              if(err[0].equalsIgnoreCase("false"))
                              {             result.setText("");
                              
                                          if(select==1)
                                          {String read="";
                                          File res=new File(System.getProperty("user.dir")+"/temp//result.txt");
                                          BufferedReader cin=new BufferedReader(new FileReader(res));
                                            String cols=  read=cin.readLine();
                                               result.append(read + "\n");
                                                while(read!=null)
                                                {
                                                    read=cin.readLine();
                                                    if(read!=null)
                                                    {if(read.equalsIgnoreCase(cols))
                                                    continue;
                                                    else
                                                    result.append(read + "\n");
                                                    }
                                                }
                                            cin.close();
                                          }else
                                              result.setText("Successfully Executed Query");
                              }else
                                    result.setText(err[1]);
                     }else
                           result.setText("Syntax Wrong for SQL Query or please select a sql Query");

        }catch(Exception e ){e.printStackTrace();}     
        }
    }//GEN-LAST:event_queryKeyReleased

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed

        if(jToggleButton1.isSelected())
        {    onetree();
        jToggleButton1.setText("Databases");
        }else
        {    jToggleButton1.setText("Tables");

            initializedatabasetree();
        
        }   // TODO add your handling code here:
    }//GEN-LAST:event_jToggleButton1ActionPerformed


    public void initializedatabasetree()
    {
     try{
                                                    BufferedReader cin=new BufferedReader(new FileReader(new File(System.getProperty("user.dir")+"/system//cnffile.txt")));
                                                    String read=cin.readLine();
                                                    int count=0;
                                                    boolean execonce=false;
                                                    String tab=null;
                                                    String database=null;

                                                    while(read!=null)
                                                    {    tab=read.split("-")[1].split(",")[0];
                                                         database=read.split("-")[1].split(",")[1].split(";")[0];
                                                         count++;
                                                         read=cin.readLine();
                                                         read=cin.readLine();
                                                         read=cin.readLine();
                                                         read=cin.readLine();
                                                         read=cin.readLine();
                                                         
                                                    }
                                                    cin.close();
                                                    //System.out.println("count " + count);
                                                    String tables[]=new String[count];
                                                    String datab[]=new String[count];
                                                    String cols[]=new String[count];
                                                    cin=new BufferedReader(new FileReader(new File( System.getProperty("user.dir")+"/system//cnffile.txt")));
                                                    read=cin.readLine();
                                                    count=0;

                                                    while(read!=null)
                                                    {    tab=read.split("-")[1].split(",")[0];
                                                         database=read.split("-")[1].split(",")[1].split(";")[0];
                                                         tables[count]=database+"&" + tab;
                                                         datab[count]=database;
                                                         read=cin.readLine();
                                                         read=cin.readLine();
                                                         read=cin.readLine();
                                                         cols[count]=read.split(":")[0];
                                                         read=cin.readLine();
                                                         read=cin.readLine();
                                                         count++;
                                                         
                                                         
                                                    }
                                                    cin.close();


                                                        Arrays.toString(tables);
                                                        List<String> list = Arrays.asList(tables);
                                                        Set<String> set = new HashSet<String>(list);
                                                        //System.out.print("Remove duplicate result: ");
                                                        String[] ttresult = new String[set.size()];
                                                        set.toArray(ttresult);
                                                        Arrays.toString(datab);
                                                        list = Arrays.asList(datab);
                                                        set = new HashSet<String>(list);
                                                      //  System.out.print("Remove duplicate result: ");
                                                        String ddresult []= new String[set.size()];
                                                        set.toArray(ddresult);
                                                       // for(String s:ddresult)
                                                     //   {
                                                      //  System.out.println("s " + s);
                                                    //    }
                                                        DefaultMutableTreeNode [] data=new DefaultMutableTreeNode[ddresult.length];
                                                        for(int i=0;i<data.length;i++)
                                                        {   data[i]=new DefaultMutableTreeNode(ddresult[i]);
                                                      //  System.out.println(" datas " +data[i].toString());
                                                        }
                                                        for(int i=0;i<ttresult.length;i++)
                                                        {
                                                        String te=ttresult[i].split("&")[0];
                                                        String tabl=ttresult[i].split("&")[1];
                                                            for(int k=0;k<data.length;k++)
                                                            {
                                                            if(te.equalsIgnoreCase(ddresult[k]))
                                                                data[k].add(new DefaultMutableTreeNode(tabl));
                                                            }

                                                        }
                                                        DefaultMutableTreeNode root=new DefaultMutableTreeNode("Databases");
                                                        for(int k=0;k<data.length;k++)
                                                        {root.add(data[k]);
                                                      //  System.out.println(" data " +data[k].toString());
                                                        }

                                                        jTree1=new JTree(root);
                                                        jScrollPane3.setViewportView(jTree1);
                                                        jScrollPane3.repaint();
                                                        this.repaint();







}catch(Exception e){e.printStackTrace();}
     
    }

    public void onetree()
    {
      try{
                                                  
                                                    BufferedReader cin=new BufferedReader(new FileReader(new File(System.getProperty("user.dir")+"/system//cnffile.txt")));
                                                    String read=cin.readLine();
                                                     int count=0;
                                                    while(read!=null)
                                                    {
                                                    cin.readLine();
                                                     cin.readLine();
                                                    cin.readLine();
                                                    cin.readLine();
                                                    read=cin.readLine();
                                                   count++;
                                                    }
                                                     cin.close();
                                                      System.out.println("count " + count);
                                                    String tableName[]=new String[count];
                                                    String cols[]=new String[count];
                                                    cin=new BufferedReader(new FileReader(new File(System.getProperty("user.dir")+"/system//cnffile.txt")));
                                                    read=cin.readLine();
                                                    count=0;
                                                    while(read!=null)
                                                    {
                                                    tableName[count]=read.split("-")[1].split(",")[0].toLowerCase();
                                                    cin.readLine();
                                                    cin.readLine();
                                                    read=cin.readLine();
                                                    cols[count]=read.split("-")[1].split(":")[0].toLowerCase();
                                                    cin.readLine();
                                                    read=cin.readLine();
                                                    count++;
                                                    }
                                                    cin.close();
                                                    //count=0;
                                                   /*
                                                    boolean match=false;
                                                    
                                                    for (int i=0;i<tableName.length;i++)
                                                    {
                                                    loop2:for(int j=i;j<tableName.length;j++)
                                                    {
                                                    
                                                    if(tableName[i].equalsIgnoreCase(tableName[j]))
                                                    {match=true;
                                                    break loop2;
                                                    }
                                                    }
                                                    if(match)
                                                    count++;
                                                    match=false;
                                                    }
                                                    String mt[]=new String[count];
                                                    String mtc[]=new String[count];
                                                    */
                                                    //count=0;
                                                     DefaultMutableTreeNode root=new DefaultMutableTreeNode("Tables");
                                                     DefaultMutableTreeNode [] table=new DefaultMutableTreeNode[count];
                                                     String newcols="";
                                                     count=0;
                                                     for (int i=0;i<tableName.length ;i++)
                                                    {   //mt[count]=tableName[i];
                                                         if(tableName[i].equalsIgnoreCase(""))
                                                             continue;
                                                         
                                                                table[count]=new DefaultMutableTreeNode(tableName[i]);
                                                                root.add(table[count]);
                                                                
                                                                newcols=cols[i];

                                                     for(int j=i+1;j<tableName.length;j++)
                                                    {   
                                                    if(tableName[i].equalsIgnoreCase(tableName[j]))
                                                    {newcols+=","+cols[j];
                                                     //System.out.println("na,e " + tableName[j] + " j" + j +" i" + i);
                                                     tableName[j]="";
                                                    }
                                                     }
                                                        Arrays.toString(newcols.split(","));
                                                        List<String> list = Arrays.asList(newcols.split(","));
                                                        Set<String> set = new HashSet<String>(list);
                                                        //System.out.print("Remove duplicate result: ");
                                                        String[] res = new String[set.size()];
                                                        set.toArray(res);
                                                        for(int k=0;k<res.length;k++)
                                                        {
                                                        table[count].add(new DefaultMutableTreeNode(res[k]));
                                                        }
                                                    count++;
                                                    }
                                                         jTree1=new JTree(root);
                                                        jScrollPane3.setViewportView(jTree1);
                                                        jScrollPane3.repaint();
                                                        this.repaint();



      }catch(Exception e){e.printStackTrace();}

    }

    /**
    * @param args the command line arguments
    */


    /*
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QueryGUI().setVisible(true);
            }
        });
    }


    */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JTree jTree1;
    private javax.swing.JTextArea query;
    private javax.swing.JTextArea result;
    // End of variables declaration//GEN-END:variables

}
