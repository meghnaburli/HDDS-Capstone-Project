/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Fragment.java
 *
 *
 *
 * Created on 23 Oct, 2010, 9:31:24 AM
 */

package hdds;

import com.microsoft.sqlserver.jdbc.SQLServerResultSetMetaData;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.net.InetAddress;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import oracle.jdbc.OracleDatabaseMetaData;
import oracle.jdbc.OracleResultSetMetaData;

/**
 *
 * @author Harsh
 */
 class Fragment extends javax.swing.JFrame  {

    
    public Fragment() {
        try {
            initComponents();
            new Systemfunction().addback(frame);
            Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            DriverManager.registerDriver(new oracle.jdbc.driver.OracleDriver());
        } catch (Exception ex) {
            
        }

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        df = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        dfl = new javax.swing.JList();
        NOF = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        load = new javax.swing.JList();
        LOT = new javax.swing.JLabel();
        SelTab = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        ok1 = new javax.swing.JButton();
        can1 = new javax.swing.JButton();
        ftype = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        ftypl = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jPasswordField1 = new javax.swing.JPasswordField();
        jScrollPane4 = new javax.swing.JScrollPane();
        loat = new javax.swing.JList();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Fragment:Step 1 of 3");
        setAlwaysOnTop(true);
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(696, 375));
        setModalExclusionType(null);
        setResizable(false);

        df.setText("Database Format");

        dfl.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));
        dfl.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "SQL", "ORACLE", "ACCESS" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        dfl.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        dfl.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        dfl.setDragEnabled(true);
        dfl.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                dflValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(dfl);

        NOF.setText("No. of Fragments");

        jTextField1.setAutoscrolls(false);

        load.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        load.setDragEnabled(true);
        load.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                loadValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(load);

        LOT.setText("List of Available Databases");

        SelTab.setText("Selected Table");

        jTextField2.setEditable(false);
        jTextField2.setAutoscrolls(false);

        ok1.setText("Next");
        ok1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ok1ActionPerformed(evt);
            }
        });

        can1.setText("Cancel");
        can1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                can1ActionPerformed(evt);
            }
        });

        ftype.setText("Fragment type");

        ftypl.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "HORIZONTAL", "VERTICAL" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        ftypl.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        ftypl.setAutoscrolls(false);
        jScrollPane3.setViewportView(ftypl);

        jLabel1.setText("Username");

        jTextField3.setAutoscrolls(false);

        jLabel2.setText("Password");

        jPasswordField1.setAutoscrolls(false);

        loat.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        loat.setAutoscrolls(false);
        loat.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                loatValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(loat);

        jLabel3.setText("List of  Tables");

        jLabel4.setText("Max=");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(df, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NOF, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SelTab, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ftype, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(ok1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4))
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(can1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LOT)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(df, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52)
                        .addComponent(NOF, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16)
                        .addComponent(SelTab, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(ftype, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(116, 116, 116)
                        .addComponent(ok1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(16, 16, 16)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(94, 94, 94)
                        .addComponent(can1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(31, 31, 31)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(LOT, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void dflValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_dflValueChanged
           loop: if(!evt.getValueIsAdjusting())
            {
                jLabel4.setText("Max="+new Systemfunction().maxavailable(dfl.getAnchorSelectionIndex()));
            jLabel4.update(jLabel4.getGraphics());

             String[] nu={"Nothing to show "};
             loat.setListData(nu);
             read="sa";
             String [] listf=null;
             BufferedReader win;
             int sel= dfl.getAnchorSelectionIndex();
             int ora=0;
             try {
                win = new BufferedReader(new FileReader(System.getProperty("user.dir")+"/system\\info.txt"));
                if (sel==0) // sql
                {read=win.readLine();
                ora=0;
                database="";
                }if (sel==1) //oracle
                {ora=1;
                win.readLine();
                win.readLine();
                database=win.readLine();
                read=database;}
                 if(sel==2)//access
                 {      database="";
                     win = new BufferedReader(new FileReader(System.getProperty("user.dir")+"/system\\info.txt"));
                     read=win.readLine();
                     read=win.readLine();
                     ora=0;
                 }   //System.out.println(database);
                 //System.out.println( " read " + read);
                    if (read==null || read.equalsIgnoreCase(""))
                    load.setListData(nu);
                    if(read.equalsIgnoreCase("sa") && ora==0)
                    load.setListData(nu);


                 if (ora==1 && database!=null && !database.equalsIgnoreCase(""))
                {
                Connection con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:"+database,"scott" , "tiger"); //database name instead of ORCl
                OracleDatabaseMetaData dmd = (OracleDatabaseMetaData)con.getMetaData();

                ResultSet rs1 = null;
                rs1 = dmd.getTables(null,"SCOTT","%",null);
                int i=0;
                while(rs1.next())
                {
                     //     System.out.println("   "+ rs1.getString(3)+" : "+rs1.getString(4));
                   i++;
                }
                listf=new String[i];
                i=0;
                rs1 = dmd.getTables(null,"SCOTT","%",null);
                while(rs1.next())
                {
                //System.out.println("dsfsd" + rs1.getString(4));
                    listf[i++]=rs1.getString(3);
                }
                load.setListData(listf);
                con.close();
                }//end of ora
                else
                {
                     if (ora==1)
                     load.setListData(nu);
                }

                   FileFilter acs=new FileFilter() {


            public boolean accept(File pathname) {
                //pathname.getName();
                //System.out.println("pathnames" + pathname.getAbsolutePath()+"name " + pathname.getName());
                String [] spltf=pathname.getName().split("\\.");
                int len=spltf.length;
                String fileext="";
                if(len>1)
                fileext=spltf[len-1];
                if(fileext.equalsIgnoreCase("accdb") || fileext.equalsIgnoreCase("mdb"))
                return true;
                else
                return false;
            }
        };
                   FileFilter sqlff=new FileFilter() {

            public boolean accept(File pathname) {
                //pathname.getName();
                //System.out.println("pathnames" + pathname.getAbsolutePath()+"name " + pathname.getName());
                String [] spltf=pathname.getName().split("\\.");
                int len=spltf.length;
                String fileext="";
                if(len>1)
                fileext=spltf[len-1];
                String database="";
                for (int j=0;j<spltf.length-1;j++)
                database+=spltf[j];
                if(fileext.equalsIgnoreCase("mdf") && !database.equalsIgnoreCase("mssqlsystemresource") && !database.equalsIgnoreCase("msdbdata") )
                return true;
                else
                return false;
            }
        };


                    if (!read.equalsIgnoreCase("sa") && read!=null)
                    {
                    File self=new File(read);
                    String temp []=self.list(); // validation needed for all other filess
                    if(temp!=null && sel==0)
                    {
                        for (int i=0;i<temp.length;i++)
                        {
                            boolean ac=sqlff.accept(new File(temp[i]));
                            if (!ac)
                            temp[i]="";
                            //System.out.println("s" + temp[i]);
                        }
                        //load.setListData(listf);
                        int g=0;
                        for(int h=0;(h<temp.length);h++)
                        {
                            if(!temp[h].equalsIgnoreCase(""))
                             g++;
                        }
                        //System.out.println("g" + g);
                        listf=new String[g];
                        g=0;
                        for(int h=0;h<temp.length;h++)
                        {
                            if(!temp[h].equalsIgnoreCase(""))
                            listf[g++]=temp[h];
                        }
                        load.setListData(listf);
                    }
                    else if(temp!=null && sel==2)
                    {

                        for (int i=0;i<temp.length;i++)
                        {
                            boolean ac=acs.accept(new File(temp[i]));
                            if (!ac)
                            temp[i]="";
                            //System.out.println("s" + temp[i]);
                        }
                        //load.setListData(listf);
                        int g=0;
                        for(int h=0;(h<temp.length);h++)
                        {
                            if(!temp[h].equalsIgnoreCase(""))
                             g++;
                        }
                        //System.out.println("g" + g);
                        listf=new String[g];
                        g=0;
                        for(int h=0;h<temp.length;h++)
                        {
                            if(!temp[h].equalsIgnoreCase(""))
                            listf[g++]=temp[h];
                        }
                        load.setListData(listf);
                    }
                    }
                    else
                    load.setListData(nu);
                    
                    
                    
      

            } catch (Exception ex) {
               ex.printStackTrace();
               //read="sa";
               //load.setListData(nu);
            }
        } // TODO add your handling code here:
    }//GEN-LAST:event_dflValueChanged

    private void loadValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_loadValueChanged

        if (!evt.getValueIsAdjusting())
        {   
           
            String selt=(String)load.getSelectedValue();
            if(dfl.getAnchorSelectionIndex()==1)
            {  
            jTextField2.setText((String)load.getSelectedValue());
            }
      //File db=new File(selt);
        usrnam=jTextField3.getText();
        pass=jPasswordField1.getPassword();
        pas="";
        for (int i=0;i<pass.length;i++)
        pas+=pass[i]+"";
        //System.out.println("usrnam" + usrnam + "password " + pas);
        if(usrnam==null || pas==null)
        {   usrnam="";
            pas="";
        }
        if (dfl.getSelectedIndex()!=1 && selt!=null)
        {   String conStro="";
                        try {
                             String [] spltf=selt.split("\\.");
                             int len=spltf.length;
                             filenam="";
                             for (int j=0;j<spltf.length-1;j++)
                                {filenam+=spltf[j];

                                }

                            //System.out.println(filenam);
                            if (dfl.getSelectedIndex()==2)
                             {
                                conStro = "jdbc:odbc:Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=" + new File(read+"\\"+selt).getAbsolutePath();
                                 database=filenam;
                            
                            }
                             else
                                 {
                   
                                     conStro = "jdbc:sqlserver://localhost;databaseName="+filenam+";integratedSecurity=true"; // database name,password and username
                                     database=filenam;
                            
                                 }

                     Connection con=DriverManager.getConnection(conStro,usrnam,pas);
                     DatabaseMetaData dbmd =con.getMetaData();
                    String[] types = {"TABLE"};
                    ResultSet resultSet = dbmd.getTables(null, null, "%", types);
                    int count=0;
                     while (resultSet.next()) {count++;}

                String tableName[]=new String[count];
                count=0;
                resultSet = dbmd.getTables(null, null, "%", types);
   
                 while (resultSet.next()) {
       
                  tableName[count++] = resultSet.getString(3);

                                            }
                resultSet.close();
                con.close();
                loat.setListData(tableName);


                } catch (Exception ex) {
                    
                }
       }
        else
        {
        String[] nu={"Nothing to show "};
                    loat.setListData(nu);
        }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_loadValueChanged

    private void can1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_can1ActionPerformed
this.dispose();

// TODO add your handling code here:
    }//GEN-LAST:event_can1ActionPerformed

    private void loatValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_loatValueChanged

        if (!evt.getValueIsAdjusting() &&(dfl.getAnchorSelectionIndex()!=1) )
        {

         String selt= (String)loat.getSelectedValue();
        jTextField2.setText(selt);

        }
        // TODO add your handling code here:
    }//GEN-LAST:event_loatValueChanged

    private void ok1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ok1ActionPerformed
   //validation required

  if(jTextField1.getText()!=null && !jTextField1.getText().equalsIgnoreCase("") )
  {nf=Integer.parseInt(jTextField1.getText());
  if(Integer.parseInt(jTextField1.getText())<=Integer.parseInt(jLabel4.getText().split("=")[1]))
  {
   file=(String)load.getSelectedValue();
    //validation for file format and null selection
  ftyp=(String)ftypl.getSelectedValue();
  usrnam=jTextField3.getText();
  pass=jPasswordField1.getPassword();
  if((jTextField2.getText()!=null && !jTextField2.getText().equalsIgnoreCase("")))
  {
    if(nf>0 && nf<=20)
    {
        if(ftyp!=null)
        {
        Systemfunction obj=new Systemfunction();
         boolean fragexist=obj.checkfragment(jTextField2.getText());
  
    if(!fragexist)
    {           this.getContentPane().removeAll();
                this.getContentPane().update(getGraphics());
                this.repaint();
            boolean err=step2();
           // System.out.println("err step 2 "+err);
            if (err)
            {
               this.getContentPane().removeAll();
               this.getContentPane().update(getGraphics());
               this.repaint();
            String errror[]={"Possible Causes","1.No nodes found in iplist file","2.Internal Error"};
            errorcheck(errror);
            this.dispose();
            //could be an internal error
            //display n error box
            }
    }//end of fragexist
    else
            {
            //show dialog box displaying fragment already exist
            String er[]={"One or more Fragments of the same table exist on rhe network"};
            errorcheck(er);
            }

        }else{
                String er[]={"Select a type of fragmentation to be performed Horizontal or Vertical"};
                 errorcheck(er);

             }

        }else
            {
             String er[]={"No of fragments allowed are in the range of 1 to 20"};
             errorcheck(er);

            }
        }else{
             String er[]={"Please select a table for fragmentation"};
            errorcheck(er);

        }
  }else
  {
         String er[]={"Enter no of fragments less than or equal to the max available fragments"};
            errorcheck(er);


  }
  }else{
            String er[]={"Enter no of fragments "};
            errorcheck(er);



        }
    }//GEN-LAST:event_ok1ActionPerformed

    private boolean step2()
    { // show the list of ips with all the available databases or only supported // show the column names for easy manipulation
     boolean err=false;
        try{
            JPanel panel1=new JPanel();
  
       
        this.setTitle("Fragment:Step 2 of 3");
        //this.setSize(Toolkit.getDefaultToolkit().getScreenSize());
        this.update(getGraphics());
        this.repaint();
        for (int i=0;i<pass.length;i++)
       pas+=pass[i]+"";
     
     String [] spltf=file.split("\\.");
int len=spltf.length;

if(len>1)
{fileext=spltf[len-1];

}
else
{ // oracle selection
fileext="ora";

}
filenam=jTextField2.getText();

 jfq=new JTextField[nf];
 jfql=new JTextField[nf];
ip1l=new  JComboBox[nf];
String ipre="";
BufferedReader ipl=new BufferedReader(new FileReader(System.getProperty("user.dir")+"/system\\iplist.txt"));
//validation if file doesnt exist
ipre=ipl.readLine();
int countip=1;
while (ipre!=null)
{countip++;
ipre=ipl.readLine();
//System.out.println(ipre);
}
System.out.println("count ip " + countip);
ip1=new String[countip-1];
ipl.close();

BufferedReader inf=new BufferedReader(new FileReader(System.getProperty("user.dir")+"/system\\inf.txt"));
String inread=inf.readLine();
String temp[]=null;
countip=0;
while(inread!=null)
{
temp=inread.split(",");
if(temp.length>=1)
{if(temp[0].equalsIgnoreCase("1") && fileext.equalsIgnoreCase("mdf"))
    countip++;
}
if(temp.length>=2)
{//System.out.println("temop " + temp[1]);
    if(temp[1].equalsIgnoreCase("2") && (dfl.getSelectedIndex()==2))
countip++;
}
if(temp.length>=3)
{if(temp[2].equalsIgnoreCase("3") && (dfl.getSelectedIndex()==1))
 countip++;
}
inread=inf.readLine();
}
int lines [] =new int[countip];
//System.out.println("count" + countip);
System.out.println("dfl" + dfl.getSelectedIndex());
inf=new BufferedReader(new FileReader(System.getProperty("user.dir")+"/system\\inf.txt"));
inread=inf.readLine();
countip=0;
int lin=1;
while(inread!=null)
{
temp=inread.split(",");

if(temp.length>=1)
{  
    if(temp[0].equalsIgnoreCase("1") && fileext.equalsIgnoreCase("mdf"))
    lines[countip++]=lin;}
if(temp.length>=2)
{//System.out.println("temop " + temp[1]);
    if(temp[1].equalsIgnoreCase("2") && (dfl.getSelectedIndex()==2))
    lines[countip++]=lin;

}
if(temp.length>=3)
{ //  System.out.println(temp[2]);
    if(temp[2].equalsIgnoreCase("3") && (dfl.getSelectedIndex()==1))
    lines[countip++]=lin;
}
inread=inf.readLine();
lin++;
}
//System.out.println("count" + lin);
String [] lstip=new String[countip];

ipl=new BufferedReader(new FileReader(System.getProperty("user.dir")+"/system//iplist.txt"));
int k=0;
for(int i=0;i<lines.length;i++)
{
while(k!=lines[i])
{k++;
read=ipl.readLine();
lstip[i]=read;

}
//System.out.println("read  " + lines[i] +  k );
//if(lines[i]==k)
        
//read=ipl.readLine();

//if(lines[i]==k)
  //  lstip[i]=read;


}

//if no ips found stop the execution
if(lstip.length==0)
    err=true;
//String [] temp=new String[4];
 ipl.close();
 /*
for (int c=0;c<(countip-1);c++)
{ ipre=ipl.readLine();
 ip1[c]=ipre;
//we wont be needing the iplist file
}*/
 
ipl.close();
for (int i=0;i<nf;i++)
{
    ip1l[i]=new JComboBox(lstip);
 ip1l[i].setSize(50, 10);
}
//this.setLayout(new FlowLayout(FlowLayout.LEFT,10,10));
panel1.setLayout(new GridBagLayout());
//this.setLayout(new GridBagLayout());

/*
 JPanel mypa=new JPanel();
mypa.setSize(this.getSize());
mypa.setBackground(Color.red);
mypa.setVisible(true);
JScrollPane mysc=new JScrollPane(mypa,JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
mysc.setSize(this.getSize());
mysc.setVisible(true);

this.add(mysc);
*/
GridBagConstraints c = new GridBagConstraints();


int g=0;
int h=0;
if (ftyp.equals("HORIZONTAL"))
{
    for ( g=0,h=0;g<jfq.length;g++,h=g+2)
    {
    jfq[g]=new JTextField("select * from " + filenam + " where");
    c.fill = GridBagConstraints.HORIZONTAL;
    c.weightx=1.0;
    c.ipadx=5;
    c.ipady=5;
    c.gridx=0;
    c.gridy=h;
c.insets=new Insets(20,10,0,0);

jfq[g].setEditable(false);
jfq[g].setSize(150, 30);
jfq[g].setVisible(true);
jfql[g]=new JTextField();
jfql[g].setMinimumSize(new Dimension(80,30));
jfql[g].setColumns(30);
jfql[g].setMaximumSize(new Dimension(80,30));
panel1.add(jfq[g],c);

c.fill = GridBagConstraints.HORIZONTAL;
c.weightx = 0.5;
c.gridx=1;
c.gridy=h;
c.ipadx=5;
c.ipady=5;
c.insets=new Insets(20,10,0,0);

panel1.add(jfql[g],c);
c.fill = GridBagConstraints.HORIZONTAL;
c.weightx = 0.5;
c.gridx=2;
c.gridy=h;
c.ipadx=5;
c.ipady=5;
c.insets=new Insets(20,10,0,0);

panel1.add(ip1l[g],c);
c.fill = GridBagConstraints.HORIZONTAL;
c.weightx = 0.5;
c.gridx=3;
c.gridy=h;
c.ipadx=5;
c.ipady=5;
c.insets=new Insets(20,10,0,0);

}
    Systemfunction obj=new Systemfunction();
    String cols=null;
    if(dfl.getSelectedIndex()==0)
    cols=obj.getcols(loat.getSelectedValue().toString(),database, 1, usrnam, pas);
    else if(dfl.getSelectedIndex()==1)
     cols=obj.getcols(load.getSelectedValue().toString(), database, 3, usrnam, pas);
    else if(dfl.getSelectedIndex()==2)
    cols= obj.getcols(loat.getSelectedValue().toString(),file, 2, usrnam, pas);
    
    c.weightx=1.0;
    c.gridx=0;
    c.gridy=h+3;
   // c.gridwidth=1;
    c.anchor=GridBagConstraints.SOUTHWEST;
    c.fill=GridBagConstraints.NONE;
    JTextField col=new JTextField(cols);
    col.setSize(200, 20);
    col.setMaximumSize(new Dimension(200,20));
    col.setVisible(true);
    col.setEditable(false);
    panel1.add(col,c);


    
    JButton step2ok=new JButton("Next");
    c.weightx=0.5;
    c.gridx=1;
    c.gridy=h+3;

    c.gridwidth=2;
    c.anchor=GridBagConstraints.SOUTHWEST;
    c.fill=GridBagConstraints.NONE;
    c.insets=new Insets(20,10,0,0);
    step2ok.addActionListener(new ActionListener() {

                                                    public void actionPerformed(ActionEvent e) {
                                                       step3();
                                                    }
                                                });
                                                panel1.add(step2ok,c);
    JButton step2cancel=new JButton(" Cancel ");
    c.weightx=0.5;
    c.gridx=1;
    c.gridy=h+3;

    c.gridwidth=2;
    c.anchor=GridBagConstraints.SOUTH;
    c.fill=GridBagConstraints.NONE;
    c.insets=new Insets(20,10,0,0);
    step2cancel.addActionListener(new ActionListener() {

                                                    public void actionPerformed(ActionEvent e) {
                                                     frame.dispose();
                                                    }
                                                });
    panel1.add(step2cancel,c);

                                                //panel1.setSize(this.getSize());
//panel1.setBackground(Color.red);


     /*
JList lip=new JList(lstip);
c.fill = GridBagConstraints.HORIZONTAL;
c.weightx = 0.5;
c.gridx=6;
c.gridy=(g+1);
c.ipadx=5;
c.ipady=5;

this.add(lip,c);
*/





}//end of horizontal
                                else
                                {
                                //acccess doesnt suprt the primary key function so display n warning if it has primary keys then fragment
                                //using the primary key n if not user will mess the application a bug that i cant fix it,




                                     String connectUrl=null;
                                     String prim=null;
                                     Connection con=null;
                                    if(fileext.equalsIgnoreCase("mdf"))
                                    {
                                        Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                                        connectUrl = "jdbc:sqlserver://localhost;databaseName="+database+";integratedSecurity=true"; // database name,password and username
                                        con = DriverManager.getConnection(connectUrl,usrnam,pas);

                                    }
                                    if(fileext.equalsIgnoreCase("ora"))
                                    {
                                        DriverManager.registerDriver(new oracle.jdbc.driver.OracleDriver());
                                        con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:"+ database,"scott" , "tiger"); //database name and password,username

                                    }
                                  //   System.out.println("fileext"  +fileext + " " + !fileext.equalsIgnoreCase("mdb")  );
                                    if(!fileext.equalsIgnoreCase("accdb") && !fileext.equalsIgnoreCase("mdb"))
                                    {   DatabaseMetaData dbmd =con.getMetaData();
                                         ResultSet resultSet = null;
                                         int contpri=0;
                                        resultSet=dbmd.getPrimaryKeys(null, null,filenam );
                                        while (resultSet.next()) {contpri++;}
                                        String [] primary=null;
                                        if(contpri!=0)
                                        primary=new String [contpri];
                                        contpri=0;
                                        resultSet=dbmd.getPrimaryKeys(null, null,filenam);
                                        while (resultSet.next())
                                         {
                                         primary[contpri++]=resultSet.getString(4);
                                        // for (int i=1;i<=6;i++)
                                        //  {//System.out.println("pi " + resultSet.getString(i));
                                        //  }
                                         }
                                         
                                         
                                           if (primary!=null)
                                            {prim="";
                                               if(primary.length>1)
    {prim+=primary[0]+",";
    for(k=1;k<(primary.length-1);k++)
    prim+=primary[k]+","+"";
    prim+=primary[primary.length-1]+"";
    }
    else
    {
    prim+=primary[0];
    };
                                                
                                                System.out.println("primary" + prim);
                                            }
                                         
                                    }//end of primary key extraction
                                    else
                                    {prim="";

                                    Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                                    String conStro = "jdbc:odbc:Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ="+new File(System.getProperty("user.dir")+(String)"/access//"+load.getSelectedValue()).getPath() ;
                                    con=DriverManager.getConnection(conStro);
                                    ResultSet rs=con.getMetaData().getBestRowIdentifier(con.getCatalog(), null, jTextField2.getText(), DatabaseMetaData.bestRowTemporary, false);
                                    if(rs.next())
                                    prim=rs.getString(2);
                                    else
                                    {//no primary keys found now dnt allow
                                    //System.out.println("no primary keys found stop execution");
                                    prim=null;
                                    }

                                     //warning if cant find primary key or best row identifier
                                    }
                                     if(prim!=null)
                                     {//int g=0;
                                                         jfqvl=new JTextField[nf];
                                     for ( g=0;g<jfq.length;g++)
                                     {
                                         if(!prim.equalsIgnoreCase(""))
                                         jfq[g]=new JTextField("select " + prim + " ," + "");
                                         else
                                            jfq[g]=new JTextField("select "+ ""); //we could be raising n error coz if not rite then query will go rong

                                            c.fill = GridBagConstraints.HORIZONTAL;
                                            c.weightx = 0.5;
                                            c.ipadx=5;
                                            c.ipady=5;
                                            c.gridx=0;
                                            c.gridy=g;


                                        jfq[g].setEditable(false);
                                        jfq[g].setSize(200, 30);
                                        jfq[g].setVisible(true);
                                        panel1.add(jfq[g],c);
                                        jfql[g]=new JTextField();
                                        jfql[g].setMinimumSize(new Dimension(40,20));
                                        jfql[g].setColumns(30);
                                        jfql[g].setMaximumSize(new Dimension(80,20));
                                        c.fill = GridBagConstraints.HORIZONTAL;
                                        c.weightx = 0.5;
                                        c.gridx=1;
                                        c.gridy=g;
                                        c.ipadx=5;
                                        c.ipady=5;
                                        panel1.add(jfql[g],c);
                                        jfqvl[g]=new JTextField();
                                        jfqvl[g].setMinimumSize(new Dimension(40,20));
                                        //jfqvl[g].setColumns(60);
                                        jfqvl[g].setMaximumSize(new Dimension(80,20));
                                        jfqvl[g].setText(" from " + "" + filenam);
                                        jfqvl[g].setEditable(false);
                                        c.weightx = 0.5;
                                        c.gridx=2;
                                        c.gridy=g;
                                        c.ipadx=5;
                                        c.ipady=5;
                                        panel1.add(jfqvl[g],c);
                                        c.weightx = 0.5;
                                        c.gridx=3;
                                        c.gridy=g;
                                        c.ipadx=5;
                                        c.ipady=5;
                                        panel1.add(ip1l[g],c);
                                     }//end of for
                                                          Systemfunction obj=new Systemfunction();
    String cols=null;
    if(dfl.getSelectedIndex()==0)
    cols=obj.getcols(loat.getSelectedValue().toString(),database, 1, usrnam, pas);
    else if(dfl.getSelectedIndex()==1)
     cols=obj.getcols(load.getSelectedValue().toString(), database, 3, usrnam, pas);
    else if(dfl.getSelectedIndex()==2)
    cols= obj.getcols(loat.getSelectedValue().toString(),file, 2, usrnam, pas);

    c.weightx=0.5;
    c.gridx=0;
    c.gridy=h+3;
    c.gridwidth=1;
    c.anchor=GridBagConstraints.SOUTHWEST;
    c.fill=GridBagConstraints.NONE;
    JTextField col=new JTextField(cols);
    col.setSize(200, 20);
    col.setVisible(true);
    col.setEditable(false);
    panel1.add(col,c);


                             JButton step2ok=new JButton("Next");
    c.weightx=0.5;
    c.gridx=1;
    c.gridy=h+3;
    //c.ipady=5;

    c.gridwidth=2;
    c.anchor=GridBagConstraints.SOUTHWEST;
    c.fill=GridBagConstraints.NONE;
     c.insets=new Insets(20,10,0,0);
    step2ok.addActionListener(new ActionListener() {

                                                    public void actionPerformed(ActionEvent e) {
                                                       step3();
                                                    }
                                                });
                                                panel1.add(step2ok,c);
    JButton step2cancel=new JButton(" Cancel ");
    c.weightx=0.5;
    c.gridx=1;
    c.gridy=h+3;
    //c.ipady=5;
    c.gridwidth=2;
    c.anchor=GridBagConstraints.SOUTH;
    c.fill=GridBagConstraints.NONE;

    step2cancel.addActionListener(new ActionListener() {

                                                    public void actionPerformed(ActionEvent e) {
                                                     frame.dispose();
                                                    }
                                                });
                                                panel1.add(step2cancel,c);



                                     }else
                                            {//no primary keys found stop execution
                                            String er[]={"No primary key found in the table used for lossless fragmentation"};
                                            errorcheck(er);
                                            this.dispose();
                                            }
                                }//end of vertical
                                /*JButton step2ok=new JButton("Next");
                                JButton step2cancel=new JButton(" Cancel ");

                                step2ok.addActionListener(new ActionListener() {

                                                    public void actionPerformed(ActionEvent e) {
                                                       step3();
                                                    }
                                                });

                                step2cancel.addActionListener(new ActionListener() {

                                                    public void actionPerformed(ActionEvent e) {
                                                     frame.dispose();
                                                    }
                                                });
                                
                                this.add(step2ok);
                                this.add(step2cancel);
                                
                                this.pack();
                                this.paintAll(getGraphics());*/
//panel1
JScrollPane mysc=new JScrollPane(panel1,JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
//mysc.setSize(panel1.getSize());


//panel1.setSize(1000,450);
panel1.setVisible(true);
this.add(mysc);
mysc.setVisible(true);
/*
ImageIcon icon = new ImageIcon("pics\\background.png");
panel1.setSize(icon.getIconWidth(),icon.getIconHeight());
JLabel label=new JLabel();
label.setIcon(icon);
label.setSize(icon.getIconWidth(),icon.getIconHeight());
label.setVisible(true);
panel1.add(label);

label.setLocation(0, 0);
panel1.update(panel1.getGraphics());
*///this.pack();
//this.setSize(mysc.getSize());
this.setSize((int)(Toolkit.getDefaultToolkit().getScreenSize().getWidth()*0.6),(int)(Toolkit.getDefaultToolkit().getScreenSize().getHeight()*0.6));
panel1.setSize((int)this.getSize().getWidth()-5,(int)this.getSize().getHeight()-15);
mysc.setSize(panel1.getSize().width-5, panel1.getSize().height-15);
this.setResizable(false);
//mysc.setSize(panel1.getSize());
//this.pack();
this.paintAll(getGraphics());
this.repaint();



     }catch(Exception e){e.printStackTrace();err=true;}
    return err;}

   /*
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Fragment().setVisible(true);
            }
        });
    }
*/
    //remove the entire screeen show progress bar of the entire process
    public void step3(){

/*
 check for queries and ip addresses,null queries,
no null queries no null selections etc
 */

                this.setTitle("Fragmentation:Step 3 of 3");
                String finalquery [] =new String[(Integer.parseInt(jTextField1.getText()))];
                ip=new String[finalquery.length];
                //System.out.println("ftyp " + ftyp);
                for (int j=0;j<finalquery.length;j++)
                {
                    if(ftyp.equalsIgnoreCase("horizontal"))
                    finalquery[j]=jfq[j].getText()+ " " + jfql[j].getText();
                    else
                    finalquery[j]=jfq[j].getText()+ " " + jfql[j].getText() + " " + jfqvl[j].getText();

                    ip[j]=(String)ip1l[j].getSelectedItem();
               // System.out.println("query are " + finalquery[j] + "ip " + ip[j]);
                }

                //kill ne tempcnffile present,this ensures that all new fragmented data is ritten to tempcnffile
                File cnf=new File(System.getProperty("user.dir")+"/system//tempcnffile.txt");
                if(cnf.exists())
                cnf.delete();
                /*
               System.out.println("username " + usrnam);
                System.out.println("password " + pas);
                System.out.println("no of frag " + finalquery.length);
                System.out.println("fileext " + fileext);
                System.out.println("filnameeeeeeee " + database);
                System.out.println("database " + ((String)load.getSelectedValue()));
                System.out.println("filename " + new File((String)read + "\\"+load.getSelectedValue()) );
                // new File((String)read + "\\"+load.getSelectedValue())
                */
                String fragt="";
                fragt=ftypl.getSelectedValue().toString();
                if(fragt.equalsIgnoreCase("horizontal"))
                fragt="h";
                else
                fragt="v";
            if (fileext.equalsIgnoreCase("accdb") || fileext.equalsIgnoreCase("mdb"))
            {
                error= accessfrag(database,new File(System.getProperty("user.dir")+(String)"/access//"+load.getSelectedValue()),finalquery.length,pas,usrnam,finalquery,ip,fragt);
            //System.out.println(" asd" + new File("access//"+(String)load.getSelectedValue()).getAbsolutePath());
            }
                            if (fileext.equalsIgnoreCase("ora"))
            {
                             error=   errchckquery(fileext,database,finalquery.length,"tiger","scott",finalquery);
            }
            if (fileext.equalsIgnoreCase("mdf"))
            {
                error=errchckquery(fileext,database,finalquery.length,pas,usrnam,finalquery);


            }

                
    
    boolean tableexistatip=new Systemfunction().tableexistatip(jTextField2.getText().trim(), ip);
    if(!tableexistatip)
    {
    boolean contip=new Systemfunction().findsipduplicate(ip);
    if(!contip)
    {
    boolean selfip=false;

    String hostip=null;
    try{
    hostip=InetAddress.getLocalHost().getHostAddress();
    }catch(Exception e ){e.printStackTrace();}
    for(int i=0;i<ip.length;i++)
    {
        //System.out.println(ip[i]+" " +hostip.equalsIgnoreCase(ip[i]));
    if(hostip.equalsIgnoreCase(ip[i]))
    {selfip=true;
    break;
    }
    }

    if(!selfip)
    {//boolean tableexist=new Systemfunction().tableexist(file, database, file);
    // finding duplicate ip addresses
    //System.out.println("contstra " + constra + " cont " + cont  + " contip " + contip + " selfip " + selfip) ;
    String ercons[]=checkconstraints(jTextField2.getText(),database,finalquery.length,pas,usrnam,fileext);
    
    if(ercons[0].equalsIgnoreCase("false"))
    {
    boolean cont=errorcheck(error); //query error checking
    String errsuc []=new String[finalquery.length];
    String err [] =new String[finalquery.length];
    //System.out.println("cont " + cont);

                                                                                if (cont)           //this cont continues if query allrite
                                                                                {           int w=0;
                                                                                           
                                                                                            final JDialog msgbox=new JDialog(frame,"Message");
                                                                                            GridBagConstraints c = new GridBagConstraints();
                                                                                            msgbox.setLayout(new GridBagLayout());
                                                                                            c.fill = GridBagConstraints.HORIZONTAL;
                                                                                            c.gridwidth=1;
                                                                                            c.gridx=0;
                                                                                            c.gridy=w;
                                                                                            JLabel lbl=new JLabel("1.Checking if all nodes are available");
                                                                                            msgbox.add(lbl,c);
                                                                                            //msgbox.pack();
                                                                                            msgbox.setSize(500,500);
                                                                                            msgbox.setLocationRelativeTo(frame);
                                                                                            msgbox.setVisible(true);
                                                                                            msgbox.update(msgbox.getGraphics());
                                                                                            msgbox.paintAll(msgbox.getGraphics());

                                                                                         
                       
                                                                                            comm up=new comm("up",ip);
                                                                                           // String [] iperr=up.run2();
                                                                                            up=null;
                                                                                           String []iperr={"true",""};
                                                                                            
                                                                                            
                                                                                            

                                                                                            if(iperr[0].equalsIgnoreCase("true"))
                                                                                            {
                                                                                            //System.out.println("All ips are up ");

                                                                                            JProgressBar pro=new JProgressBar(0,finalquery.length*5);
                                                                                            pro.setValue(1);
                                                                                            pro.setForeground(Color.GREEN);
                                                                                            pro.setSize(msgbox.getSize());
                                                                                            pro.setVisible(true);
                                                                                            c.gridy=w+2;
                                                                                            msgbox.add(new JLabel("2.Sending fragment tables "),c);
                                                                                            c.gridx=1;
                                                                                            
                                                                                            msgbox.add(pro,c);
                                                                                            //msgbox.pack();
                                                                                            //msgbox.setSize((int)msgbox.getSize().getWidth()*2,(int)msgbox.getSize().getHeight()*2);
                                                                                            
                                                                                            msgbox.update(msgbox.getGraphics());
                                                                                            msgbox.paintAll(msgbox.getGraphics());
                                                                                            c.gridx=0;

                                                                                            if (fileext.equalsIgnoreCase("accdb") || fileext.equalsIgnoreCase("mdb"))
                                                                                            {
                                                                                            initiatefiletransfer [] ifl=new initiatefiletransfer[finalquery.length];
                                                                                            String filename=(String)load.getSelectedValue();
                                                                                            
                                                                                            for (int k=0;k<ifl.length;k++)
                                                                                            {
                                                                                            ifl[k]=new initiatefiletransfer(ip[k]);
                                                                                            //String temp[]=ifl[k].run2();
                                                                                            String temp[]=ifl[k].run2(new File(System.getProperty("user.dir")+"/access//temp//"+database+"_"+k+"."+fileext));
                                                                                            errsuc[k]=temp[0];
                                                                                            err[k]=temp[1];
                                   
                                                                                            pro.setValue((k+1)*5);
                                                                                            
                                                                                           
                                                                                            msgbox.update(msgbox.getGraphics());
                                                                                            msgbox.paintAll(msgbox.getGraphics());
                                                                                            }
                                                                                            }

                                                                                        if (fileext.equalsIgnoreCase("mdf"))
                                                                                        {
                                                                                            String sqlas[][]=  sqlfragf(jTextField2.getText(),database,finalquery.length,pas,usrnam,finalquery,ip,fragt);
                                                                                            initiatearraytransfer [] iaf=new initiatearraytransfer[finalquery.length];
                                                                                            for (int i=0;i<finalquery.length;i++)
                                                                                            {
                                                                                            iaf[i]=new initiatearraytransfer(ip[i],sqlas[i]);
                                                                                            iaf[i].setPriority(Thread.MAX_PRIORITY);
                                                                                            String temp[]=iaf[i].run2();
                                                                                            errsuc[i]=temp[0];
                                                                                            err[i]=temp[1];

                                                                                             pro.setValue((i+1)*5);
                                                                                           
                                                                                            msgbox.update(msgbox.getGraphics());
                                                                                            msgbox.paintAll(msgbox.getGraphics());
                                                                                            }



                                                                                        }//end of sql

                                                                                                if (fileext.equalsIgnoreCase("ora"))
                                                                                            {

                                                                                                String sqlas[][]=  orafragf(jTextField2.getText(),database,finalquery.length,pas,usrnam,finalquery,ip,fragt);
                                                                                                initiatearraytransfer [] iaf=new initiatearraytransfer[finalquery.length];

                                                                                                for (int i=0;i<finalquery.length;i++)
                                                                                                {
                                                                                                    iaf[i]=new initiatearraytransfer(ip[i],sqlas[i]);
                                                                                                    iaf[i].setPriority(Thread.MAX_PRIORITY);

                                                                                                    String temp[]=iaf[i].run2();
                                                                                                    errsuc[i]=temp[0];
                                                                                                    err[i]=temp[1];
                                                                                                     pro.setValue((i+1)*5);
                                                                                                
                                                                                            msgbox.update(msgbox.getGraphics());
                                                                                            msgbox.paintAll(msgbox.getGraphics());
                                                                                                }



                                                                                            }//end of ora
                                                                                String ipblocked [] =new String[10];
                                                                                boolean cont2=errorcheck2(errsuc,err);
                                                                                //cont2 true means all fragmented file,tables have been transfered n now only cnffile needs to be done
                                                                              // cont2=false;
                                                                                if (cont2)
                                                                                {   try{
                                                                                        Systemfunction obj=new Systemfunction();
                                                                                   // doubtful
                                                                                        //deletes table from cnffile.mit not need this
                                                                                    //String er[]= obj.deltablefromcnf((String)loat.getSelectedValue(),InetAddress.getLocalHost().getHostAddress());
                                                                                    //er[1]=gives error mesage,er[0]=true or false
                                                                                       // msgbox=msg.showmsg(frame,"Taking backup for roll back");

                                                                                        //msgbox.add();
                                                                                        w=w+2;
                                                                                    c.gridy=w+2;
                                                                                    msgbox.add(new JLabel("3.Taking backup for roll back action"),c);
                                                                                     //msgbox.pack();
                                                                                           // msgbox.setSize((int)msgbox.getSize().getWidth()*2,(int)msgbox.getSize().getHeight()*2);

                                                                                            msgbox.update(msgbox.getGraphics());
                                                                                            msgbox.paintAll(msgbox.getGraphics());
                                                                                    obj.backup(new File(System.getProperty("user.dir")+"/system//cnffile.txt").getParent());
                                                                                   //taaking bACKUP
                                                                                    //String er2[]=obj.appendfile("system//cnfcopy", "system//cnffile",false);
                                                                                     w=w+2;
                                                                                    c.gridy=w+2;
                                                                                    msgbox.add(new JLabel("4.Updating Configuration files"),c);
                                                                                  // msgbox.pack();
                                                                                    //        msgbox.setSize((int)msgbox.getSize().getWidth()*2,(int)msgbox.getSize().getHeight()*2);

                                                                                            msgbox.update(msgbox.getGraphics());
                                                                                            msgbox.paintAll(msgbox.getGraphics());

                                                                                   String er1[]=obj.appendfile(System.getProperty("user.dir")+"/system//tempcnffile.txt",System.getProperty("user.dir")+"/system//cnffile.txt" ,true);
                                                                                   //doubtful til here
                                                                                            //er2[1]=gives error mesage,er[0]=true or false
                                                                                    //make sum dialog boxes
                                                                                    //we dont require cnfcopy since backing up entire system folder

                                                                                   if(er1[0].equalsIgnoreCase("true") /*&& er2[0].equalsIgnoreCase("true")*/)
                                                                                    {
                                                                                        //msgbox=msg.showmsg(frame,"Updated configuration file is being sent to all please wait...This may take few mins");
                                                                                      w=w+2;
                                                                                    c.gridy=w+2;
                                                                                    msgbox.add(new JLabel("5.Sending Updated Configuration files"),c);
                                                                                  // msgbox.pack();
                                                                                    //        msgbox.setSize((int)msgbox.getSize().getWidth()*2,(int)msgbox.getSize().getHeight()*2);

                                                                                            msgbox.update(msgbox.getGraphics());
                                                                                            msgbox.paintAll(msgbox.getGraphics());

                                                                                        global.server=true;
                                                                                        global.free=false;
                                                                                        File iplistf=new File(System.getProperty("user.dir")+"/system//iplist.txt");
                                                                                        BufferedReader win =new BufferedReader(new FileReader(iplistf));
                                                                                        String reada=win.readLine();
                                                                                        String eror[]=null;
                                                                                        //String eror[]={"true",""};

                                                                                        //static
                                                                                        //ipblocked[0]=reada;
                                                                                        
                                                                                        int u=0;
                                                                                        int ers=0;
                                                                                              while(reada!=null)
                                                                                             {
                                                                                                   
                                                                                                if(reada.equalsIgnoreCase(InetAddress.getLocalHost().getHostAddress()))
                                                                                                reada=win.readLine();
                                                                                                if(reada!=null)
                                                                                                ipblocked[u++]=reada;
                                                                                                else
                                                                                                break;
                                                                                               // System.out.println(" ip blocked  " + reada + " u is " + (u-1));
                                                                                            File cnffile=new File(System.getProperty("user.dir")+"/system//cnffile.txt");
                                                                                            //System.out.println("cnffile " + cnffile.exists());
                                                                                            initiatefiletransfer cn=new initiatefiletransfer(reada);
                                                                                            cn.setPriority(Thread.MAX_PRIORITY);
                                                                                           eror= cn.run2(cnffile);
                                                                                            reada=win.readLine();
                                                                                            //System.out.println(" ip blocked  " + reada + " u is " + (u-1));

                                                                                            if(eror[0].equalsIgnoreCase("true"))
                                                                                            continue;
                                                                                            else
                                                                                            {
                                                                                            ers=1;
                                                                                            break;
                                                                                            }
                                                                                            }
                                                                                            win.close();
                                                                                           
                                                                                            //ers=1;//for abort
                                                                                if(ers==1 || !global.cont)
                                                                                {

                                                                                   // msgbox=msg.showmsg(frame,"Rolling back action because configuration file  couldn't be sent to all nodes");
                                                                                     w=w+2;
                                                                                    c.gridy=w+2;
                                                                                    msgbox.add(new JLabel("6.Rolling back action because configuration file couldn't be sent to all nodes"),c);
                                                                                    //msgbox.pack();
                                                                                    //        msgbox.setSize((int)msgbox.getSize().getWidth()*2,(int)msgbox.getSize().getHeight()*2);


                                                                                               JButton ok=new JButton("OK");
                                                                                            ok.setSize(40, 20);
                                                                                            ok.setVisible(true);
                                                                                            ok.addActionListener(new ActionListener() {

                                                                                              public void actionPerformed(ActionEvent e) {
                                               msgbox.setVisible(false);
                                               msgbox.update(msgbox.getGraphics());
                                               msgbox.paintAll(msgbox.getGraphics());

                                                }
                                                                                              });
                                                                                               msgbox.update(msgbox.getGraphics());
                                                                                            msgbox.paintAll(msgbox.getGraphics());

                                                                                            
                                                                                    //roll back everything send abort msg to all ips,rename backup_system to system and delete system
                                                                                //new File("system//").delete();
                                                                                //new File("backup_system//").renameTo(new File("system//"));
                                                                                File direc=new File(System.getProperty("user.dir")+"/backup_system\\").getCanonicalFile();
                                                                                //File dir=new File("C:\\Users\\Harsh\\Documents\\NetBeansProjects\\HDDS\\src\\hdds\\backup_system");
                                                                                //System.out.println("file "+ direc.equals(dir) + " isdir" + direc.getCanonicalPath());
                                                                                File tempsd []=direc.listFiles();
                                                                               Systemfunction sobj=new Systemfunction();
                                                                                //System.out.println("sobk " + tempsd.length + " ss" + direc.getParentFile().getPath());

                                                                                for(int i=0;i<tempsd.length;i++)
                                                                                {
                                                                                //System.out.println("path" + direc.getParentFile().getPath() + "//system//"  + tempsd[i].getName()) ;

                                                                                    sobj.textfilecopy(tempsd[i].toString(),direc.getParentFile().getPath() + "//system//"  + tempsd[i].getName());
                                                                            
                                                                                }

                                                                                comm abort=new comm("abort",ipblocked);
                                                                                String er[]=abort.run2();
                                                                               // System.out.println("sent abort to all ips " + er [0] + "if false then  mesage " + er[1] );

                                                                                msgbox.setVisible(false);
                                                                                                            if(er[0].equalsIgnoreCase("false"))
                                                                                {

                                                                                        msgbox.setVisible(false);
                                                                                        msgbox.update(msgbox.getGraphics());
                                                                                        msgbox.paintAll(msgbox.getGraphics());
                                                                                                                      global.ip="";
                    global.server=true;
                    global.access=false;
                    global.free=true;
                                                                                    String irer[]={"Software caused an irrecoverable error please perform setup again on all nodes"};
                                                                                    errorcheck(irer);
                                                                                }


                                                                                }//erorr while transfering
                                                                                else
                                                                                {
                                                                                   w=w+2;
                                                                                                c.gridy=w+2;
                                                                                    msgbox.add(new JLabel("6.Fragmentation has been performed successfully"),c);
                                                                                   // msgbox.pack();
                                                                                            //msgbox.setSize((int)msgbox.getSize().getWidth()*2,(int)msgbox.getSize().getHeight()*2);
                                                                                              global.ip="";
                    global.server=true;
                    global.access=false;
                    global.free=true;
                                                                                            msgbox.update(msgbox.getGraphics());
                                                                                            msgbox.paintAll(msgbox.getGraphics());
                                                                                            JButton ok=new JButton("OK");
                                                                                            ok.setSize(40, 20);
                                                                                            ok.setVisible(true);
                                                                                            ok.addActionListener(new ActionListener() {

                                                                                              public void actionPerformed(ActionEvent e) {
                                               msgbox.setVisible(false);
                                               msgbox.update(msgbox.getGraphics());
                                               msgbox.paintAll(msgbox.getGraphics());
                                               frame.dispose();
                                                }
                                                                                              });


                                                                                comm suc=new comm("success",ipblocked);
                                                                                String er[]=suc.run2();
                                                                               // System.out.println(" sent success to all ips ");
                                                                               // System.out.println("if false errorr " + er[0] + " mesage  " + er[1]);
                                                                                //if eror over here then hell with it,tel user to handle it himself
                                                                                //String er[]={"true",""};
                                                                                if(er[0].equalsIgnoreCase("false"))
                                                                                {

                                                                                        msgbox.setVisible(false);
                                                                                        msgbox.update(msgbox.getGraphics());
                                                                                        msgbox.paintAll(msgbox.getGraphics());
                                                                        
                                                                                    String irer[]={"Software caused an irrecoverable error please perform setup again on all nodes"};
                                                                                    errorcheck(irer);
                                                                                              
                                                                                                               
                                                                                }else
                                                                                {         //  Thread.sleep(100);
                                                                                             w=w+2;
                                                                                            c.gridy=w+2;
                                                                                            msgbox.add(ok,c);
                                                                                           // msgbox.pack();
                                                                                           // msgbox.setSize((int)msgbox.getSize().getWidth()*2,(int)msgbox.getSize().getHeight()*2);
                                                                                            msgbox.update(msgbox.getGraphics());
                                                                                            msgbox.paintAll(msgbox.getGraphics());
                                                                                   
                                                                                    //msgbox.setVisible(false);
                                                                                }

                                                                                }
                                                                                    }
                                                                                                        else
                                                                                                        {
                                                                                                        msgbox.setVisible(false);
                                                                                                        msgbox.update(msgbox.getGraphics());
                                                                                                        msgbox.paintAll(msgbox.getGraphics());

                                                                                                        String irer[]={"Configuration file couldn't be updated please make sure it is created and closed"};
                                                                                                        errorcheck(irer);
                                                                                                        //System.out.println("cudnt update cnffile ");
                                                                                                        //couldnt update cnffile show error
                                                                                                        //rare error so priority less
                                                                                                        }
                                                                                    //delete the tempcnffile formed during fragmentation
                                                                                    new File(System.getProperty("user.dir")+"/system/tempcnffile.txt").delete();

                                                                                    }catch(Exception e){e.printStackTrace();}
                                                                                }//end of if cont2
                                                                                else
                                                                                    {
                                                                                   w=w+2;
                                                                                    c.gridy=w+2;
                                                                                    msgbox.add(new JLabel("6.Rolling back action because received an error from remote host"),c);
                                                                                     JButton ok=new JButton("OK");
                                                                                            ok.setSize(40, 20);
                                                                                            ok.setVisible(true);
                                                                                            ok.addActionListener(new ActionListener() {

                                                                                              public void actionPerformed(ActionEvent e) {
                                                                                               msgbox.setVisible(false);
                                                                                               msgbox.update(msgbox.getGraphics());
                                                                                               msgbox.paintAll(msgbox.getGraphics());

                                                }
                                                                                              });                                                                                     w=w+2;
                                                                                            c.gridy=w+2;
                                                                                            msgbox.add(ok,c);
                                                                                            msgbox.update(msgbox.getGraphics());
                                                                                            msgbox.paintAll(msgbox.getGraphics());
                                                                                            try{
                                                                                File direc=new File(System.getProperty("user.dir")+"/backup_system\\").getCanonicalFile();
                                                                                File tempsd []=direc.listFiles();
                                                                               Systemfunction sobj=new Systemfunction();
                                                                                //System.out.println("sobk " + tempsd.length + " ss" + direc.getParentFile().getPath());

                                                                                for(int i=0;i<tempsd.length;i++)
                                                                                {
                                                                                //System.out.println("path" + direc.getParentFile().getPath() + "//system//"  + tempsd[i].getName()) ;

                                                                                    sobj.textfilecopy(tempsd[i].toString(),direc.getParentFile().getPath() + "//system//"  + tempsd[i].getName());

                                                                                }

                                                                                comm abort=new comm("abort",ipblocked);
                                                                                String er[]=abort.run2();
                                                                                System.out.println("sent abort to all ips " + er [0] + "if false then  mesage " + er[1] );

                                                                                                            if(er[0].equalsIgnoreCase("false"))
                                                                                {

                                                                                        msgbox.setVisible(false);
                                                                                        msgbox.update(msgbox.getGraphics());
                                                                                        msgbox.paintAll(msgbox.getGraphics());
                                                                                           global.ip="";
                    global.server=true;
                    global.access=false;
                    global.free=true;
                                                                        
                                                                                    String irer[]={"Software caused an irrecoverable error please perform setup again on all nodes"};
                                                                                    errorcheck(irer);
                                                                                                                                 }


                                                                                }catch(Exception e){e.printStackTrace();}

                                                                  
                                                                                    }
                                                                                            }//end of iperr
                                                                                            else
                                                                                            {
                                                                                                msgbox.setVisible(false);
                                                                                             msgbox.update(msgbox.getGraphics());
                                                                                            msgbox.paintAll(msgbox.getGraphics());
                                                                                            Systemfunction obj=new Systemfunction();
                                                                                            //System.out.println("error " + iperr[1]);
                                                                                            //errorcheck(iperr);
                                                                                            obj.showerr(iperr, frame,"network"); 
                                                                                            }
                                                                                }//end of cont
                                                                                
    }else
            {errorcheck(ercons);
            }
    //end of constraint checking
    }else{
        String err[]={"A fragment cannot be stored on the host having the original table"};
        errorcheck(err);

         }//end of selfip
    }else//end of duplicate ip
        {
        String err[]={"Same ip addresses for 2 or more fragments"};
        errorcheck(err);
        }//end of duplicate ip
    }else//end of tableexistatip
    {
        String err[]={"Table with the same name exist on one of the remote node","Possibly due to replication of the table"};
        errorcheck(err);

    }
    
    }//end of step 3


    
    
    
    


    //methods declaration by author thats harsh dnt u dare touch without talking to me

    
public String[] accessfrag(final String database,final File odb,final int nof,final String password,final String username,final String fragmentqueries[],final String ip[],final String fragt)

{
    boolean stop=false;
    int i=0;
    String [] err=new String[nof];
    //check for queries
    try{
    
    Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
String conStro = "jdbc:odbc:Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=" +  odb.getAbsolutePath();
Connection con=DriverManager.getConnection(conStro,username,password);
Statement cs=con.createStatement();

for (i =0;i<fragmentqueries.length;i++)
{
try{
ResultSet rs=cs.executeQuery(fragmentqueries[i]);
err[i]="false";
}    catch(Exception e) {
        err[i]="Error in Query "+ (i+1)+" " + e.getMessage();
       // System.out.println("error mesage " + err[i]);
        stop=true;
continue;

//e.printStackTrace();


    }


}
}
    catch(Exception e) {
        err[i]=e.getMessage();
        //System.out.println("error mesage " + err[i]);
    stop=true;
        //e.printStackTrace();


    }

if(!stop)
{
    
    
   for (  i=0;i<nof;i++)
{
/*final*/ int counts=i;
        //   Thread acces[]=new Thread[nof];
   //acces[i]= new Thread(){
//public void run()
//{

try{


String conStro ="";
String conStrn = "";
Connection con=null;
Connection con1=null;
File tempf=new File(odb.getParent()+"/temp/"+database+"_"+counts+"."+fileext);		//get new copy system this will crash ur system
tempf.createNewFile();
FileInputStream inn=new FileInputStream(odb);
FileOutputStream outt=new FileOutputStream(tempf);
byte [] rd=new byte[1024*10];
for (long h=odb.length();h>=0;h-=rd.length-1)
{
    inn.read(rd);
outt.write(rd);
}
inn.close();
outt.close();



Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
conStro = "jdbc:odbc:Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=" +  odb.getAbsolutePath();
conStrn = "jdbc:odbc:Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=" +  tempf.getAbsolutePath();
con=DriverManager.getConnection(conStro,username,password);		//password
con1=DriverManager.getConnection(conStrn,username,password);	//username



DatabaseMetaData dbmd = con.getMetaData();
String[] types = {"TABLE"};
ResultSet resultSet = dbmd.getTables(null, null, "%", types);
int count=0;
 while (resultSet.next()) {count++;}

String tableName[]=new String[count];
count=0;
resultSet = dbmd.getTables(null, null, "%", types);
    // Get the table names
    while (resultSet.next()) {
        // Get the table name
       tableName[count++] = resultSet.getString(3);

		}
resultSet.close();

Statement st=con.createStatement( ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
Statement st1=con1.createStatement();
//System.out.println("query is " + fragmentqueries[counts]) ;
ResultSet rs=st.executeQuery(fragmentqueries[counts]);		//the fragmentation query

ResultSetMetaData rsMetaData = rs.getMetaData();

int numberofColumns = rsMetaData.getColumnCount();
String queryontable="";
    if (numberofColumns>0)
  {queryontable=rsMetaData.getTableName(1);}

//System.out.println("query on table" + queryontable );


//for(int y=0;y<tableName.length;y++)
//System.out.println(tableName[y]+ "\n");


for(int f=0;f<tableName.length;f++)
{
if (tableName[f].equals(queryontable))
{
st1=con1.createStatement();
//System.out.println("delete  from " + tableName[f]);
st1.execute("delete * from " + tableName[f]);
st1.close();
}
else
{
st1=con1.createStatement();
//System.out.println("drop table " + tableName[f]);
st1.execute("drop table " + tableName[f]);
st1.close();
}

}

//get the names of columns for inserting values

//querybuilder for inserting new values into table
//first the names of columns
rs.beforeFirst();
while(rs.next())
{

String sqlv="";//insert into "+ queryontable+" (" +rsMetaData.getColumnName(1)+"";
String sql="";

boolean prevnul=false;

//now the values
String gt=null;
String val=rs.getString(1);

//System.out.println("value" + val+"\t "+ gt);
/*
if (val=="null" || val=="" || val==null || val.equalsIgnoreCase("") || val.equalsIgnoreCase("null") || val.equalsIgnoreCase(null))
{sql=sql+"";
sqlv="insert into "+ queryontable+" (" + "";
prevnul=true;
}else
{
sqlv="insert into "+ queryontable+" (" +rsMetaData.getColumnName(1)+"";
prevnul=false;
gt=rsMetaData.getColumnTypeName(1);
if(gt.equalsIgnoreCase("varchar") || gt.equalsIgnoreCase("varchar2") || gt.equalsIgnoreCase("string") || gt.equalsIgnoreCase("text") || gt.equalsIgnoreCase("clob")|| gt.equalsIgnoreCase("datetime")|| gt.equalsIgnoreCase("number")|| gt.equalsIgnoreCase("time")|| gt.equalsIgnoreCase("date"))
sql=sql+"" +  "'"+val+"'"+"";
else
sql=sql+"" +val+"";
}


for(int g=2;g<=numberofColumns;g++)
{

gt=rsMetaData.getColumnTypeName(g);
val=rs.getString(g);
//System.out.println("value" + val + "g " + g);
if (val=="null" || val=="" || val==null)
{
    if((!prevnul) && g!=numberofColumns)
    {sqlv=sqlv+",";sql=sql+",";}
    prevnul=true;
}
else
{
if(prevnul)
{sqlv=sqlv+""+rsMetaData.getColumnName(g)+"";

prevnul=false;
if(gt.equalsIgnoreCase("varchar") || gt.equalsIgnoreCase("varchar2") || gt.equalsIgnoreCase("string") || gt.equalsIgnoreCase("text") || gt.equalsIgnoreCase("clob")|| gt.equalsIgnoreCase("datetime")|| gt.equalsIgnoreCase("time")|| gt.equalsIgnoreCase("date"))
sql=sql+"" + "'"+val+"'"+"";
else
sql=sql+"" +val+"";

}else
{sqlv=sqlv+" ,"+rsMetaData.getColumnName(g)+"";
prevnul=false;
if(gt.equalsIgnoreCase("varchar") || gt.equalsIgnoreCase("varchar2") || gt.equalsIgnoreCase("string") || gt.equalsIgnoreCase("text") || gt.equalsIgnoreCase("clob")|| gt.equalsIgnoreCase("datetime")|| gt.equalsIgnoreCase("time")|| gt.equalsIgnoreCase("date"))
sql=sql+"" + ","+""+ "'"+val+"'"+"";
else
sql=sql+""+"," +val+"";
}}
}
sql=sql+""+")";
sqlv=sqlv+" " + ")  values (";
*/

sqlv="insert into "+ queryontable+" (";
for(int g=1;g<=numberofColumns;g++)
{
gt=rsMetaData.getColumnTypeName(g);
val=rs.getString(g);
if (val=="null" || val=="" || val==null)
{
   continue;
}
else
{

sqlv=sqlv+""+rsMetaData.getColumnName(g)+",";

if(gt.equalsIgnoreCase("varchar") || gt.equalsIgnoreCase("varchar2")||gt.equalsIgnoreCase("nvarchar")  || gt.equalsIgnoreCase("string") || gt.equalsIgnoreCase("text") || gt.equalsIgnoreCase("clob")|| gt.equalsIgnoreCase("datetime")|| gt.equalsIgnoreCase("time")|| gt.equalsIgnoreCase("date"))
sql=sql+"" + "'"+val+"'"+",";
else
sql=sql+"" +val+",";

}
}
//System.out.println("sq; " + sql);
//System.out.println("sqlv " + sqlv);

sql=sql.substring(0,sql.lastIndexOf(","));
sqlv=sqlv.substring(0, sqlv.lastIndexOf(","));
sql=sql+""+")";
sqlv=sqlv+" " + ")  values (";




System.out.println("\nsql query is "  + "\t"+sqlv+sql );
st1=con1.createStatement();
st1.executeUpdate(sqlv+sql);
st1.close();
}
//end of while
//remove columns if vertical fragmentation
String []newcols=new String [numberofColumns];

for (int a=1;a<=numberofColumns;a++)
{newcols[a-1]=rsMetaData.getColumnName(a);
//System.out.println("new cols " + newcols[a-1]);
}
DatabaseMetaData meta = con.getMetaData();	// get the columns from the orgdb
ResultSet   rsColumns = meta.getColumns(null, null,queryontable , null);

int c=0;

while (rsColumns.next()) {
       rsColumns.getString("COLUMN_NAME");c++;
}

String []oldcolumn=new String [c];
c=0;
rsColumns = meta.getColumns(null, null,queryontable , null);

while (rsColumns.next()) {
     oldcolumn[c++] = rsColumns.getString("COLUMN_NAME");
//System.out.println("\ncolumn name"+oldcolumn[c++] );

}
int match=0;
//check which column not used
for (int e=0;e<oldcolumn.length;e++)
{
for (int p=0;p<newcols.length;p++)
{
//System.out.println("values are" + e + " p " + p  );
if (oldcolumn[e].equalsIgnoreCase(newcols[p]))
{match=1;
 //System.out.println("match");
 break;

}
}		//end of innerfor

if (match==1)
{match=0;
}
else
{
//dnt find a match remove that column from the table
st1=con1.createStatement();
st1.executeUpdate("ALTER TABLE " + queryontable + " DROP COLUMN " + oldcolumn[e]);
st1.close();
//System.out.println("ALTER TABLE " + queryontable + " DROP COLUMN " + oldcolumn[e]);
}

} // end of outer for

//errer[counts]="succes";
//System.out.println(errer[counts]);

/*
 * add the info to the cnfgfile
 */


BufferedWriter wout=new BufferedWriter(new FileWriter(System.getProperty("user.dir")+"/system/tempcnffile.txt",true));
wout.write("Name-"+queryontable+","+odb.getName()+";"); // write to localcnfg file
wout.newLine();
wout.write("UP-"+username+","+password+";");
wout.newLine();
wout.write("Frag-"+ fragt +","+(counts+1)+";");
wout.newLine();
wout.write("Col-");
int p=0;
for (p=0;p<newcols.length-1;p++)
{
wout.write(newcols[p]+",");
}
wout.write(newcols[p]);
wout.write(":"+	ip[counts]+";");
wout.newLine();
wout.write("F:0;");
wout.newLine();
wout.close();


//System.out.println("finally");
rsColumns.close();
rs.close();
con.close();
con1.close();


}catch(Exception ex){
//    Fragment.acerr=true;
 // System.out.println(" Fragment.access" + Fragment.acerr);
ex.printStackTrace();
err[i]=ex.getMessage();
//a problem in query stop n revert ask user to put proper queries redirect to step2 check after all queries have been processed
//collect all info on errors if poss n show it to the user

}

//}};
//acces[i].setPriority(Thread.MAX_PRIORITY);
//acces[i].start();


   }
}//end of if
return err;
}

public String[][] sqlfragf(String table,String database,int nof,String password,final String username,String fragmentqueries[],String ip[],String fragt)
{
String sql[][]=new String [nof][];
sqlfrag [] ex=new sqlfrag[nof];
for (int i=0;i<nof;i++)
{
ex[i]=new sqlfrag(table,database,i,password,username,fragmentqueries[i],ip[i],fragt);

sql[i]=ex[i].run2();


}
return sql;
}

public String[][] orafragf( String table,String database,int nof,String password,String username,String fragmentqueries[],String ip[],String fragt )
{
String sql[][]=new String [nof][];
orafrag [] ex=new orafrag[nof];
for (int i=0;i<nof;i++)
{
ex[i]=new orafrag(table,database,i,password,username,fragmentqueries[i],ip[i],fragt);
sql[i]=ex[i].run2();
}
return sql;
}

public boolean  errorcheck(String err [] )//dialog box
{
    //System.out.println("Message  sadasd" +err.length );
            boolean cont=true;
           
            
            
final JDialog errorBox=new JDialog(frame,"Error",JDialog.ModalityType.APPLICATION_MODAL);
errorBox.setLayout(new GridBagLayout());

GridBagConstraints c = new GridBagConstraints();
c.gridwidth=3;
//System.out.println("error length" + err.length);
JLabel lbl[]=new JLabel[err.length];
int g=0;
for(g=0;g<err.length && err[g]!=null;g++)

{
    if(!err[g].equalsIgnoreCase("false"))
    {

    lbl[g]=new JLabel(err[g]);
    c.fill = GridBagConstraints.HORIZONTAL;
    c.weightx = 0.5;
    c.ipadx=0;
    c.ipady=10;
    c.gridx=1;
    c.gridy=g;

lbl[g].setSize(100, 30);
lbl[g].setVisible(true);
errorBox.add(lbl[g],c);

    //System.out.println("Message "+g +"   " +err[g]);
    cont=false;
    }
    /*else
    {
        Message="Correct Query";
    }*/
            }
JButton button1= new JButton("ok");
//c.fill = GridBagConstraints.HORIZONTAL;
    c.weightx = 0.5;
    c.ipadx=0;
    c.ipady=10;
    c.gridx=2;
    c.gridy=(++g+2);
    c.gridwidth=2;
    c.anchor=GridBagConstraints.CENTER;
    c.fill=GridBagConstraints.NONE;
    
    button1.setSize(50,50);
    
    button1.setMaximumSize(new Rectangle(50,50).getSize());



    //button1.setBounds(200,200,70, 50);
    button1.setVisible(true);
    errorBox.add(button1,c);
    button1.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e)
            {

                //throw new UnsupportedOperationException("Not supported yet.");
                errorBox.dispose();
               
                
            }
        });
    errorBox.pack();
    //errorBox.setSize(500,300);
    errorBox.setResizable(false);
    errorBox.setLocationRelativeTo(this.getContentPane());
    if(!cont)
    errorBox.setVisible(true);
    




return cont;
}


public boolean errorcheck2(String err[],String er[])
{       String Message="";
        boolean cont=true;
    int e=0;
final JDialog errorBox=new JDialog(frame,"Error",JDialog.ModalityType.APPLICATION_MODAL);
errorBox.setLayout(new GridBagLayout());
GridBagConstraints c = new GridBagConstraints();
c.gridwidth=2;
JLabel lbl[]=new JLabel[err.length];
int h=0;

for( h=0;h<err.length;h++)
{//System.out.println(" err[] " + err[h]);
if (err[h].equalsIgnoreCase("false"))
{
 Message="Error in sending file to ip address "+ ip[h]+" err" +er[h]+"\\n";
 lbl[h]=new JLabel(Message);
    c.fill = GridBagConstraints.HORIZONTAL;
    c.weightx = 0.5;
    c.ipadx=0;
    c.ipady=0;
    c.gridx=0;
    c.gridy=h;

lbl[h].setSize(100, 30);
lbl[h].setVisible(true);
errorBox.add(lbl[h],c);

 cont=false;
}
}
return cont;}
//this mit not be needed
public String[] errchckquery(final String fileext,final String database,int nof,final String password,final String username,final String fragmentqueries[])
{
    
    int i=0;
    String [] err=new String[nof];


        if (fileext.equalsIgnoreCase("mdf"))
        {
        try{
            //System.out.println("database" + database);
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String connectionUrl = "jdbc:sqlserver://localhost;databaseName="+database+";integratedSecurity=true"; // database name,password and username
            Connection con = DriverManager.getConnection(connectionUrl,username,password);
            Statement cs=con.createStatement();
            for (i =0;i<fragmentqueries.length;i++)
            {
            //System.out.println("frag " + fragmentqueries[i]);
            try{ResultSet rs=cs.executeQuery(fragmentqueries[i]);
            err[i]="false";
            }catch(Exception e) {
                                    e.printStackTrace();
                                    err[i]="Error in Query " +(i+1)+" "+ e.getMessage();

                                }


            }
            }catch(Exception e) {
                                    e.printStackTrace();
                                    err[i]= e.getMessage();

                                }

            
            }//end of sql

            if (fileext.equalsIgnoreCase("ora"))
            {
                try{

                DriverManager.registerDriver(new oracle.jdbc.driver.OracleDriver());

                Connection con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:"+ database,"scott" , "tiger"); //database name and password,username
                Statement st=con.createStatement();

                for (i=0;i<fragmentqueries.length;i++)
                {
                    try{
                ResultSet rs=st.executeQuery(fragmentqueries[i]);
                err[i]="false";
                    }catch(Exception e){
                                        e.printStackTrace();
                                        err[i]="Error in Query " + (i+1)+" " + e.getMessage();
                    
                    }
                    }
                }catch(Exception e ){
                                        e.printStackTrace();
                                        err[i]=e.getMessage();
                                        
                                     }
            }
return err;
}


public String[] checkconstraints(String table,String database,int nof,String password,final String username,String fileext)
{   String err [] ={"false"};
    try{
            if(fileext.equalsIgnoreCase("mdf"))
            {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String connectionUrl = "jdbc:sqlserver://localhost;databaseName="+database+";integratedSecurity=true"; // database name,password and username
            Connection con = DriverManager.getConnection(connectionUrl,username,password);
            Statement st=con.createStatement();
                    DatabaseMetaData dbmd =con.getMetaData();
                   // String[] types = {"TABLE"};
                    ResultSet resultSet = null;
                    int contpri=0;
                    /*
                    resultSet=dbmd.getPrimaryKeys(null, null, table);
                    while (resultSet.next()) {contpri++;}
                    String [] primary=null;
                    if(contpri!=0)
                    primary=new String [contpri];
                    contpri=0;
                    resultSet=dbmd.getPrimaryKeys(null, null, table);
                    while (resultSet.next())
                    {
                    primary[contpri++]=resultSet.getString(4);
                    //for (int i=1;i<=6;i++)
                    //{
                    //System.out.println("pi " + resultSet.getString(4));
                    //}
                    }*/
                    resultSet=dbmd.getImportedKeys(null,null, table);
                    int countimp=0;
                     while(resultSet.next())
                    {
                     countimp++;
                    //for (int i=1;i<=14;i++)
                    //{
                      //   System.out.println("imported keys"+" " + resultSet.getString(i));
                    //}

                     //store this in String n pass it to the error mesage
                  //  System.out.println(" Table '" + table +"' has a foreign key relation on '"+ resultSet.getString(3)+"'");
                  //   System.out.println(" Column '" +resultSet.getString(8) + "' of table  '" + resultSet.getString(7) +
                  //           "' is depended on table '" + resultSet.getString(3) + "' on Column '" + resultSet.getString(4)+"'");
                    err[0]=" Table '" + table +"' has a foreign key relation on '"+ resultSet.getString(3)+"'"+" Column '" +resultSet.getString(8) + "' of table  '" + resultSet.getString(7) +
                             "' is depended on table '" + resultSet.getString(3) + "' on Column '" + resultSet.getString(4)+"'";
                     }
                    //String [] foreign=new String [countexp];
                    //countexp=0;
                    //resultSet=dbmd.getImportedKeys(null,null, table);
                    //while(resultSet.next())
                    //{foreign[countexp++]=resultSet.getString(12);}

                    
                     //mit need this in future ehich tables r dependent on me
                   // resultSet=dbmd.getExportedKeys(null,null, table);
                    //int counte=0;
                    //while(resultSet.next())
                    //{
                    // counte++;
                    //for (int i=1;i<=14;i++)
                    //{
                    //     System.out.println("ei " + resultSet.getString(12));
                    //}
                    //}
                    //String [] other=new String [counte];
                    //counte=0;
                    //resultSet=dbmd.getExportedKeys(null,null, table);
                    //while(resultSet.next())
                    //{other[counte++]=resultSet.getString(12);}
                    
                    //String prim="";
                    //if (countimp>0)
                    //{   err[0]="false";
                        //show dialogbox showing the error mesage



                        //stop execution
                        //System.out.println("stop execution coz it references another table");
                        //for(int i=0;i<foreign.length;i++)
                    //st.executeUpdate("alter table " + table +" drop constraint " + foreign[i]);
                    //}
            
            
            
            
            }//end of sql
            else if (fileext.equalsIgnoreCase("ora"))
            {
            DriverManager.registerDriver(new oracle.jdbc.driver.OracleDriver());
            Connection con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:"+ database,"scott" , "tiger"); //database name and password,username
            Statement st=con.createStatement();
                    DatabaseMetaData dbmd =con.getMetaData();
                   // String[] types = {"TABLE"};
                    ResultSet resultSet = null;
                    int contpri=0;

                    resultSet=dbmd.getImportedKeys(null,null, table);
                    int countimp=0;
                     while(resultSet.next())
                    {
                     countimp++;
                  //  System.out.println(" Table '" + table +"' has a foreign key relation on '"+ resultSet.getString(3)+"'");
                  //   System.out.println(" Column '" +resultSet.getString(8) + "' of table  '" + resultSet.getString(7) +
                    //         "' is depended on table '" + resultSet.getString(3) + "' on Column '" + resultSet.getString(4)+"'");
                      err[0]=" Table '" + table +"' has a foreign key relation on '"+ resultSet.getString(3)+"'"+" Column '" +resultSet.getString(8) + "' of table  '" + resultSet.getString(7) +
                             "' is depended on table '" + resultSet.getString(3) + "' on Column '" + resultSet.getString(4)+"'";

                     }
                    //if (countimp>0)
                    //{   err[0]="false";
                        //stop execution
                        //System.out.println("stop execution coz it references another table");
                        //for(int i=0;i<foreign.length;i++)
                    //st.executeUpdate("alter table " + table +" drop constraint " + foreign[i]);
                  //  }
            }



    }catch(Exception e)
    {
        e.printStackTrace();
        err[0]="false";
        err[1]=e.getMessage();
    }
return err;}



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel LOT;
    private javax.swing.JLabel NOF;
    private javax.swing.JLabel SelTab;
    private javax.swing.JButton can1;
    private javax.swing.JLabel df;
    private javax.swing.JList dfl;
    private javax.swing.JLabel ftype;
    private javax.swing.JList ftypl;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JList load;
    private javax.swing.JList loat;
    private javax.swing.JButton ok1;
    // End of variables declaration//GEN-END:variables


    //my declarations
    int nf=0;
    String file="";
    String ftyp="";
    String usrnam="";
    char [] pass=null;
    String pas="";
    String fileext="";
    String filenam="";
    String database="";

String read="sa";
JTextField [] jfq=new JTextField[nf];
JTextField [] jfql=new JTextField[nf];
JTextField [] jfqvl=new JTextField[nf];
JComboBox [] ip1l=new  JComboBox[nf];
String ip1[]={};
final JFrame frame=this;
String error []={};
String ip[]={};
 }











 class sqlfrag extends Thread{
  String table="";
  String database="";
  int counts=0;
  String password="";
  String username="";
  String fragmentqueries="";
  String ip="";
  String fragt="";
 sqlfrag(String table,String database,int counts,String password,String username,String fragmentqueries,String ip,String fragt)
 {
     this.table=table;
     this.fragmentqueries=fragmentqueries;
     this.database=database;
     this.username=username;
     this.password=password;
     this.counts=counts;
     this.ip=ip;
     this.fragt=fragt;
 }


public String[] run2()
 {
        String []sqlbatch={};

 try{

 //database name
Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
String connectionUrl = "jdbc:sqlserver://localhost;databaseName="+database+";integratedSecurity=true"; // database name,password and username
Connection con = DriverManager.getConnection(connectionUrl,username,password);

Statement fst=con.createStatement();
Statement st=con.createStatement();

Statement sta=con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
ResultSet rsa=sta.executeQuery("select * from " + table); // table name

int countrow=0;
rsa.last();
countrow=rsa.getRow();

                    DatabaseMetaData dbmd =con.getMetaData();
                   // String[] types = {"TABLE"};
                    ResultSet resultSet = null;
                    int contpri=0;
                    resultSet=dbmd.getPrimaryKeys(null, null, table);
                    while (resultSet.next()) {contpri++;}
                    String [] primary=null;
                    if(contpri!=0)
                    primary=new String [contpri];
                    contpri=0;
                    resultSet=dbmd.getPrimaryKeys(null, null, table);
                    while (resultSet.next())
                    {
                    primary[contpri++]=resultSet.getString(4);
                    for (int i=1;i<=6;i++)
                    {//System.out.println("pi " + resultSet.getString(i));
                    }
                    }
                    /*

                    resultSet=dbmd.getImportedKeys(null,null, table);
                    int countimp=0;
                     while(resultSet.next())
                    {
                     countimp++;
                    for (int i=1;i<=14;i++)
                    {System.out.println("iii"+i+" " + resultSet.getString(i));
                    }
                    }
                    //String [] foreign=new String [countexp];
                    //countexp=0;
                    //resultSet=dbmd.getImportedKeys(null,null, table);
                    //while(resultSet.next())
                    //{foreign[countexp++]=resultSet.getString(12);}

                    
                     //mit need this in future ehich tables r dependent on me
                      //resultSet=dbmd.getExportedKeys(null,null, table);
                     //int counte=0;
                    //while(resultSet.next())
                    //{
                     //counte++;
                    //for (int i=1;i<=14;i++)
                    //{System.out.println("ei"+i+" " + resultSet.getString(i));
                    //}
                    //}
                    //String [] other=new String [counte];
                    //counte=0;
                    //resultSet=dbmd.getExportedKeys(null,null, table);
                    //while(resultSet.next())
                    //{other[counte++]=resultSet.getString(12);}
                    
                    
                    if (countimp>0)
                    {
                    //for(int i=0;i<foreign.length;i++)
                    //st.executeUpdate("alter table " + table +" drop constraint " + foreign[i]);
                    //stopin execution coz other i m referencing other tables
                    System.out.println("Another table has a foreign key relation depended on me ");
                    }*/
String prim="";
if (primary!=null)
{
    if(primary.length>1)
    {prim+=primary[0]+",";
    for(int k=1;k<(primary.length-1);k++)
    prim+=primary[k]+","+"";
    prim+=primary[primary.length-1]+"";
    }
    else
    {
    prim+=primary[0];
    }
   // System.out.println("primary" + prim);
}

String queryontable=table; //change this to table
SQLServerResultSetMetaData rsMetaData = (SQLServerResultSetMetaData) rsa.getMetaData();

String sql="create table  " +queryontable+   "("; //get the table name by splitting the query string;
int columnCount =0;


    if (rsMetaData == null) {

        System.out.println("	");

      } else {

        columnCount = rsMetaData.getColumnCount();

       // System.out.println("Number of Columns in the table : " + columnCount);

String typ="";
int pre=0;


for(int i=1; i<=columnCount; i++) {



    if(!(typ=rsMetaData.getColumnTypeName(i)).equalsIgnoreCase("int"))
    {
    pre=rsMetaData.getPrecision(i);
    if(pre!=0 && !(pre<=0))
    sql=sql+" " + rsMetaData.getColumnName(i) + "  " + typ +"(" +pre+")"+" , ";
    else
    {   if(rsMetaData.getColumnTypeName(i).equalsIgnoreCase("date") || rsMetaData.getColumnTypeName(i).equalsIgnoreCase("timestamp") || rsMetaData.getColumnTypeName(i).equalsIgnoreCase("time"))
        sql=sql+" " +rsMetaData.getColumnName(i) + "  timestamp ,";
    }
    }
    else
    sql=sql+" " +rsMetaData.getColumnName(i) + "  " + rsMetaData.getColumnTypeName(i) + ",";





//	 System.out.println("Column Name :\n" + rsMetaData.getColumnName(i));
  //        System.out.println("   Column Type :\n" + rsMetaData.getColumnTypeName(i));
// 		System.out.println("Column size :\n" + rsMetaData.getPrecision(i)+"\t" + c);

     	   }sql=sql.substring(0,sql.lastIndexOf(","));
      //System.out.println("sql query is \n"  +sql );
      }



String []oldcolumn=new String [columnCount];
       for(int i=1; i<=columnCount; i++) {
oldcolumn[i-1]=rsMetaData.getColumnName(i);
//System.out.println(oldcolumn[i-1]);
}
       //for(int i=1; i<=columnCount; i++) {
       //rsMetaData.g;
       //}
sqlbatch =new String [countrow + columnCount+1+1+1];

countrow=0;
if(prim.equalsIgnoreCase(""))
sql=sql+""+")";
else
sql=sql+","+"Primary Key("+prim+"))";

 //System.out.println(sql);

sqlbatch[countrow++]="sql"; //+ database;

sqlbatch[countrow++]="create database "+database; //+ database;
sqlbatch[countrow++]="use "+database;//+database; //+ database;

sqlbatch[countrow++]=sql;
//st.addBatch(sql);

ResultSet rs=fst.executeQuery(fragmentqueries);	//fragmentation query

rsMetaData =            (SQLServerResultSetMetaData) rs.getMetaData();
columnCount=rsMetaData.getColumnCount();


while(rs.next())
{

String sqlv="";			//insert into "+ queryontable+" (" +rsMetaData.getColumnName(1)+"";
sql="";
boolean prevnul=false;

//now the values
String gt=null;
String val=null;

//System.out.println("value" + val+"\t ");
/*
if (val=="null" || val=="" || val==null || val.equalsIgnoreCase("") || val.equalsIgnoreCase("null") || val.equalsIgnoreCase(null))
{sql=sql+"";
sqlv="insert into "+ queryontable+" (" + "";
prevnul=true;
}else
{
sqlv="insert into " + queryontable+ " (" +rsMetaData.getColumnName(1)+"";
prevnul=false;
gt=rsMetaData.getColumnTypeName(1);
if(gt.equalsIgnoreCase("varchar") || gt.equalsIgnoreCase("varchar2")||gt.equalsIgnoreCase("nvarchar") || gt.equalsIgnoreCase("string") || gt.equalsIgnoreCase("text") || gt.equalsIgnoreCase("clob")|| gt.equalsIgnoreCase("datetime")|| gt.equalsIgnoreCase("number")|| gt.equalsIgnoreCase("time")|| gt.equalsIgnoreCase("date"))
sql=sql+"" +  "'"+val+"'"+"";
else
sql=sql+"" +val+"";
}


for(int g=2;g<=columnCount;g++)
{


gt=rsMetaData.getColumnTypeName(g);
val=rs.getString(g);
//System.out.println("value" + val + "g " + g);
if (val=="null" || val=="" || val==null)
{
    if((!prevnul) &&  g!=columnCount)
    {sqlv=sqlv+",";sql=sql+",";}
    prevnul=true;
}
else
{
if(prevnul)
{sqlv=sqlv+""+rsMetaData.getColumnName(g)+"";

prevnul=false;
if(gt.equalsIgnoreCase("varchar") || gt.equalsIgnoreCase("varchar2")||gt.equalsIgnoreCase("nvarchar")  || gt.equalsIgnoreCase("string") || gt.equalsIgnoreCase("text") || gt.equalsIgnoreCase("clob")|| gt.equalsIgnoreCase("datetime")|| gt.equalsIgnoreCase("time")|| gt.equalsIgnoreCase("date"))
sql=sql+"" + "'"+val+"'"+"";
else
sql=sql+"" +val+"";

}else
{sqlv=sqlv+" ,"+rsMetaData.getColumnName(g)+"";
prevnul=false;
if(gt.equalsIgnoreCase("varchar") || gt.equalsIgnoreCase("varchar2")||gt.equalsIgnoreCase("nvarchar")  || gt.equalsIgnoreCase("string") || gt.equalsIgnoreCase("text") || gt.equalsIgnoreCase("clob")|| gt.equalsIgnoreCase("datetime")|| gt.equalsIgnoreCase("time")|| gt.equalsIgnoreCase("date"))
sql=sql+"" + ","+""+ "'"+val+"'"+"";
else
sql=sql+""+"," +val+"";
}}
}
sql=sql+""+")";
sqlv=sqlv+" " + ")  values (";
*/

sqlv="insert into "+ queryontable+" (";
for(int g=1;g<=columnCount;g++)
{
gt=rsMetaData.getColumnTypeName(g);
val=rs.getString(g);



if(gt.equalsIgnoreCase("varchar") || gt.equalsIgnoreCase("varchar2")||gt.equalsIgnoreCase("nvarchar")  || gt.equalsIgnoreCase("string") || gt.equalsIgnoreCase("text") || gt.equalsIgnoreCase("clob"))
{
    val=rs.getString(g);
if (val=="null" || val=="" || val==null)
{
   continue;
}else
{       sqlv=sqlv+""+rsMetaData.getColumnName(g)+",";
        sql=sql+"" + "'"+val+"'"+",";
}
}else if (gt.equalsIgnoreCase("timestamp")|| gt.equalsIgnoreCase("time")|| gt.equalsIgnoreCase("date"))
{   sqlv=sqlv+""+rsMetaData.getColumnName(g)+",";
    sql=sql+"'" +rs.getTimestamp(g)+"',";
}else
{sqlv=sqlv+""+rsMetaData.getColumnName(g)+",";
 sql=sql+"" + " "+val+" "+",";
}

}
//System.out.println("sq; " + sql);
//System.out.println("sqlv " + sqlv);

sql=sql.substring(0,sql.lastIndexOf(","));
sqlv=sqlv.substring(0, sqlv.lastIndexOf(","));
sql=sql+""+")";
sqlv=sqlv+" " + ")  values (";




//System.out.println("sql query is \n"  +sqlv+sql );



//st.addBatch(sqlv+sql);
sqlbatch[countrow++]=sqlv+sql;
}//end of while

//st.executeBatch();



String []newcols=new String [columnCount];

for (int a=1;a<=columnCount;a++)
{newcols[a-1]=rsMetaData.getColumnName(a);
//System.out.println(newcols[a-1]);
}


int match=0;
//check which column not used
for (int e=0;e<oldcolumn.length;e++)
{
for (int p=0;p<newcols.length;p++)
{

if (oldcolumn[e].equalsIgnoreCase(newcols[p]))
{match=1;break;
}
}		//end of innerfor

if (match==1)
{match=0;
}
else
{
//dnt find a match remove that column from the table
//st=con.createStatement();
//st.executeUpdate("ALTER TABLE " + queryontable + " DROP COLUMN " + oldcolumn[e]);
sqlbatch[countrow++]="ALTER TABLE " + queryontable + " DROP COLUMN " + oldcolumn[e];
//st.close();
//System.out.println("ALTER TABLE " + queryontable + " DROP COLUMN " + oldcolumn[e]);
}

}

for (int j=0;j<countrow;j++)
{System.out.println("" + sqlbatch[j]);
}
//checking for stored procedures left

//sql=sqlbatch;
//sqlbatch[countrow++]="sql";

BufferedWriter wout=new BufferedWriter(new FileWriter(System.getProperty("user.dir")+"/system/tempcnffile.txt",true));
wout.write("Name-"+queryontable+","+database+".mdf;"); // write to localcnfg file
wout.newLine();
wout.write("UP-"+username+","+password+";");
wout.newLine();
wout.write("Frag-"+fragt+","+(counts+1)+";");
wout.newLine();
wout.write("Col-");
int p=0;
for (p=0;p<newcols.length-1;p++)
{
wout.write(newcols[p]+",");
}
wout.write(newcols[p]);
wout.write(":"+	ip+";");
wout.newLine();
wout.write("F:0;");
wout.newLine();
wout.close();


rsa.close();
rs.close();
st.close();
sta.close();
con.close();

}catch(Exception e){e.printStackTrace();}
return sqlbatch;




 }
 }




 class orafrag extends Thread {
  String table="";
  String database="";
  int counts=0;
  String password="";
  String username="";
  String fragmentqueries="";
  String ip="";
  String fragt="";
 orafrag(String table,String database,int counts,String password,String username,String fragmentqueries,String ip,String fragt)
 {
     this.table=table;
     this.fragmentqueries=fragmentqueries;
     this.database=database;
     this.username=username;
     this.password=password;
     this.counts=counts;
     this.ip=ip;
     this.fragt=fragt;
 }

 public String[] run2()
 {
     String sqlbatch []={};
try{
DriverManager.registerDriver(new oracle.jdbc.driver.OracleDriver());
Connection con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:"+ database,"scott" , "tiger"); //database name and password,username
Statement fst=con.createStatement();
Statement st=con.createStatement();

Statement sta=con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
ResultSet rsa=sta.executeQuery("select * from " + table);

int countrow=0;
 rsa.last();
 countrow=rsa.getRow();

                    DatabaseMetaData dbmd =con.getMetaData();
                    String[] types = {"TABLE"};
                    ResultSet resultSet = null;
                    int contpri=0;
                    resultSet=dbmd.getPrimaryKeys(null, null, table);
                    while (resultSet.next()) {contpri++;}
                    String [] primary=null;
                    if(contpri!=0)
                    primary= new String [contpri];
                    contpri=0;
                    resultSet=dbmd.getPrimaryKeys(null, null, table);
                    while (resultSet.next())
                    {
                    primary[contpri++]=resultSet.getString(4);
                   // for (int i=1;i<=6;i++)
                   // {//System.out.println("pi " + resultSet.getString(i));
                   // }
                    }/*
                     resultSet=dbmd.getImportedKeys(null,null, table);
                    int countexp=0;
                     while(resultSet.next())
                    {
                     countexp++;
                    for (int i=1;i<=14;i++)
                    {System.out.println("iii"+i+" " + resultSet.getString(i));
                    }
                    }
                    String [] foreign=new String [countexp];
                    countexp=0;
                    resultSet=dbmd.getImportedKeys(null,null, table);
                    while(resultSet.next())
                    {foreign[countexp++]=resultSet.getString(12);}

                    
                     //mit need this in future ehich tables r dependent on me
                      resultSet=dbmd.getExportedKeys(null,null, table);
                     int counte=0;
                    while(resultSet.next())
                    {
                     counte++;
                    for (int i=1;i<=14;i++)
                    {System.out.println("ei"+i+" " + resultSet.getString(i));
                    }
                    }
                    String [] other=new String [counte];
                    counte=0;
                    resultSet=dbmd.getExportedKeys(null,null, table);
                    while(resultSet.next())
                    {other[counte++]=resultSet.getString(12);}
                    */
                    String prim="";
                    //if (foreign!=null)
                   // {
                    //for(int i=0;i<foreign.length;i++)
                    //st.executeUpdate("alter table " + table +" drop constraint " + foreign[i]);
                    //}
if (primary!=null)
{
    if(primary.length>1)
    {prim+=primary[0]+",";
    for(int k=1;k<(primary.length-1);k++)
    prim+=primary[k]+","+"";
    prim+=primary[primary.length-1]+"";
    }
    else
    {
    prim+=primary[0];
    }
   // System.out.println("primary" + prim);
}


String queryontable=table; // new table name
   OracleResultSetMetaData rsMetaData = (OracleResultSetMetaData)rsa.getMetaData();
	String sql="create table  " +queryontable+   "("; //get the table name by splitting the query string;
      int columnCount =0;


//System.out.println("sql = " + sql);

     if (rsMetaData == null) {

        System.out.println("	");

      } else {

        columnCount = rsMetaData.getColumnCount();

        // Display number of Columns in the ResultSet
//        System.out.println("Number of Columns in the table : " + columnCount);

String typ="";
int pre=0;
for(int i=1; i<=columnCount; i++) {



    if(!(typ=rsMetaData.getColumnTypeName(i)).equalsIgnoreCase("int"))
    {
    pre=rsMetaData.getPrecision(i);
    if(pre!=0 && !(pre<=0))
    sql=sql+" " + rsMetaData.getColumnName(i) + "  " + typ +"(" +pre+")"+" , ";
    else
    {   if(rsMetaData.getColumnTypeName(i).equalsIgnoreCase("date") || rsMetaData.getColumnTypeName(i).equalsIgnoreCase("timestamp") || rsMetaData.getColumnTypeName(i).equalsIgnoreCase("time"))
        sql=sql+" " +rsMetaData.getColumnName(i) + "  timestamp ,";
    }
    }
    else
    sql=sql+" " +rsMetaData.getColumnName(i) + "  " + rsMetaData.getColumnTypeName(i) + ",";






//	 System.out.println("Column Name :\n" + rsMetaData.getColumnName(i));
  //        System.out.println("   Column Type :\n" + rsMetaData.getColumnTypeName(i));
// 		System.out.println("Column size :\n" + rsMetaData.getPrecision(i)+"\t" + c);

     	   }
sql=sql.substring(0,sql.lastIndexOf(","));
     // System.out.println("sql query is \n"  +sql );
      }


//	 System.out.println("Column Name :\n" + rsMetaData.getColumnName(i));
  //        System.out.println("   Column Type :\n" + rsMetaData.getColumnTypeName(i));
// 		System.out.println("Column size :\n" + rsMetaData.getPrecision(i)+"\t" + c);

     	



String []oldcolumn=new String [columnCount];
       for(int i=1; i<=columnCount; i++) {
oldcolumn[i-1]=rsMetaData.getColumnName(i);
//System.out.println(oldcolumn[i-1]);
}
       //for(int i=1; i<=columnCount; i++) {
       //rsMetaData.g;
       //}
sqlbatch =new String [countrow + columnCount+1];

countrow=0;
if(prim.equalsIgnoreCase(""))
sql=sql+""+")";
else
sql=sql+","+"Primary Key("+prim+"))";
//System.out.println(sql);
sqlbatch[countrow++]="ora";
sqlbatch[countrow++]=sql;

//st.addBatch(sql);
//System.out.println(fragmentqueries[counts]);
ResultSet rs=fst.executeQuery(fragmentqueries);	//fragmentation query

rsMetaData = (OracleResultSetMetaData)rs.getMetaData();
columnCount=rsMetaData.getColumnCount();


while(rs.next())
{

String sqlv="";			//insert into "+ queryontable+" (" +rsMetaData.getColumnName(1)+"";
sql="";
boolean prevnul=false;

//now the values
String gt=null;
String val=null;

//System.out.println("value" + val+"\t ");
/*
if (val=="null" || val=="" || val==null || val.equalsIgnoreCase("") || val.equalsIgnoreCase("null") || val.equalsIgnoreCase(null))
{sql=sql+"";
sqlv="insert into "+ queryontable+" (" + "";
prevnul=true;
}else
{
sqlv="insert into " + queryontable+ " (" +rsMetaData.getColumnName(1)+"";
prevnul=false;
gt=rsMetaData.getColumnTypeName(1);
if(gt.equalsIgnoreCase("varchar") || gt.equalsIgnoreCase("varchar2")||gt.equalsIgnoreCase("nvarchar") || gt.equalsIgnoreCase("string") || gt.equalsIgnoreCase("text") || gt.equalsIgnoreCase("clob")|| gt.equalsIgnoreCase("datetime")|| gt.equalsIgnoreCase("number")|| gt.equalsIgnoreCase("time")|| gt.equalsIgnoreCase("date"))
sql=sql+"" +  "'"+val+"'"+"";
else
sql=sql+"" +val+"";
}


for(int g=2;g<=columnCount;g++)
{


gt=rsMetaData.getColumnTypeName(g);
val=rs.getString(g);
//System.out.println("value" + val + "g " + g);
if (val=="null" || val=="" || val==null)
{
    if((!prevnul) && g!=columnCount)
    {sqlv=sqlv+",";sql=sql+",";}
    prevnul=true;
}
else
{
if(prevnul)
{sqlv=sqlv+""+rsMetaData.getColumnName(g)+"";

prevnul=false;
if(gt.equalsIgnoreCase("varchar") || gt.equalsIgnoreCase("varchar2")||gt.equalsIgnoreCase("nvarchar")  || gt.equalsIgnoreCase("string") || gt.equalsIgnoreCase("text") || gt.equalsIgnoreCase("clob")|| gt.equalsIgnoreCase("datetime")|| gt.equalsIgnoreCase("time")|| gt.equalsIgnoreCase("date"))
sql=sql+"" + "'"+val+"'"+"";
else
sql=sql+"" +val+"";

}else
{sqlv=sqlv+" ,"+rsMetaData.getColumnName(g)+"";
prevnul=false;
if(gt.equalsIgnoreCase("varchar") || gt.equalsIgnoreCase("varchar2")||gt.equalsIgnoreCase("nvarchar")  || gt.equalsIgnoreCase("string") || gt.equalsIgnoreCase("text") || gt.equalsIgnoreCase("clob")|| gt.equalsIgnoreCase("datetime")|| gt.equalsIgnoreCase("time")|| gt.equalsIgnoreCase("date"))
sql=sql+"" + ","+""+ "'"+val+"'"+"";
else
sql=sql+""+"," +val+"";
}}
}
sql=sql+""+")";
sqlv=sqlv+" " + ")  values (";
*/
/*
if (val=="null" || val=="" || val==null || val.equalsIgnoreCase("") || val.equalsIgnoreCase("null") || val.equalsIgnoreCase(null))
{sql=sql+"";
sqlv="insert into "+ queryontable+" (" + "";

}else
{
sqlv="insert into " + queryontable+ " (" +rsMetaData.getColumnName(1)+"";
gt=rsMetaData.getColumnTypeName(1);
if(gt.equalsIgnoreCase("varchar") || gt.equalsIgnoreCase("varchar2")||gt.equalsIgnoreCase("nvarchar") || gt.equalsIgnoreCase("string") || gt.equalsIgnoreCase("text") || gt.equalsIgnoreCase("clob")|| gt.equalsIgnoreCase("datetime")|| gt.equalsIgnoreCase("number")|| gt.equalsIgnoreCase("time")|| gt.equalsIgnoreCase("date"))
sql=sql+"" +  "'"+val+"'"+"";
else
sql=sql+"" +val+"";
}
*/
sqlv="insert into "+ queryontable+" (";
for(int g=1;g<=columnCount;g++)
{
gt=rsMetaData.getColumnTypeName(g);
val=rs.getString(g);


if(gt.equalsIgnoreCase("varchar") || gt.equalsIgnoreCase("varchar2")||gt.equalsIgnoreCase("nvarchar")  || gt.equalsIgnoreCase("string") || gt.equalsIgnoreCase("text") || gt.equalsIgnoreCase("clob"))
{
    val=rs.getString(g);
if (val=="null" || val=="" || val==null)
{
   continue;
}else
{sqlv=sqlv+""+rsMetaData.getColumnName(g)+",";

        sql=sql+"" + "'"+val+"'"+",";

}
}else if (gt.equalsIgnoreCase("timestamp")|| gt.equalsIgnoreCase("time")|| gt.equalsIgnoreCase("date"))
{sqlv=sqlv+""+rsMetaData.getColumnName(g)+",";

    sql=sql+"'" +rs.getTimestamp(g)+"',";
}else
{sqlv=sqlv+""+rsMetaData.getColumnName(g)+",";

 sql=sql+"" + " "+val+" "+",";
}

}
//System.out.println("sq; " + sql);
//System.out.println("sqlv " + sqlv);

sql=sql.substring(0,sql.lastIndexOf(","));
sqlv=sqlv.substring(0, sqlv.lastIndexOf(","));
sql=sql+""+")";
sqlv=sqlv+" " + ")  values (";



//System.out.println("sql query is \n"  +sqlv+sql );


//OracleStatement stsa=(OracleStatement)con.createStatement();//con.createStatement();
//stsa.execute(sqlv+sql);
//stsa.close();

//st.addBatch(sqlv+sql);
sqlbatch[countrow++]=sqlv+sql;
}//end of while

//st.executeBatch();



String []newcols=new String [columnCount];

for (int a=1;a<=columnCount;a++)
{newcols[a-1]=rsMetaData.getColumnName(a);
//System.out.println(newcols[a-1]);
}


int match=0;
//check which column not used
for (int e=0;e<oldcolumn.length;e++)
{
for (int p=0;p<newcols.length;p++)
{

if (oldcolumn[e].equalsIgnoreCase(newcols[p]))
{match=1;break;
}
}		//end of innerfor

if (match==1)
{match=0;
}
else
{
//dnt find a match remove that column from the table
//st=con.createStatement();
//st.executeUpdate("ALTER TABLE " + queryontable + " DROP COLUMN " + oldcolumn[e]);
sqlbatch[countrow++]="ALTER TABLE " + queryontable + " DROP COLUMN " + oldcolumn[e];
//st.close();
//System.out.println("ALTER TABLE " + queryontable + " DROP COLUMN " + oldcolumn[e]);
}

}

//sqlbatch[countrow++]="ora";
//the sql batch needs to be sent to the remote site


for (int j=0;j<countrow;j++)
{System.out.println("sql query's \n" + sqlbatch[j]);
}


//checking for stored procedures left

BufferedWriter wout=new BufferedWriter(new FileWriter(System.getProperty("user.dir")+"/system/tempcnffile.txt",true));
wout.write("Name-"+queryontable+","+database+";"); // write to localcnfg file
wout.newLine();
wout.write("UP-"+username+","+password+";");
wout.newLine();
wout.write("Frag-"+ fragt +","+(counts+1)+";");
wout.newLine();
wout.write("Col-");
int p=0;
for (p=0;p<newcols.length-1;p++)
{
wout.write(newcols[p]+",");
}
wout.write(newcols[p]);
wout.write(":"+	ip+";");
wout.newLine();
wout.write("F:0;");
wout.newLine();
wout.close();


rsa.close();
rs.close();
st.close();
sta.close();
con.close();



} catch (Exception e) {
e.printStackTrace();}
return sqlbatch;
 
 }


 }



 /*
 //things left to be done

  checking if system is up n ready.
  * basically the checksystem function of systemfunction
  not to allow fragments on the local pc
  */