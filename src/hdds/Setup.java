/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Setup.java
 *
 * Created on 22 Nov, 2010, 7:57:18 PM
 */

package hdds;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileReader;
import java.io.FileWriter;
import java.net.InetAddress;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.ResultSet;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import oracle.jdbc.OracleDatabaseMetaData;

/**
 *
 * @author Harsh
 */
public class Setup extends javax.swing.JFrame {

    /** Creates new form Setup */
    public Setup() {
        initComponents();
       //new Systemfunction().addback(frame);
  

        checksql();
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        acces = new javax.swing.JTextField();
        sql = new javax.swing.JTextField();
        orcl = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Database Initialization");

        jLabel1.setText("Access path");

        jLabel2.setText("SQL Path");

        jLabel3.setText("Oracle Database Name");

        acces.setEditable(false);
        acces.setText("access//");

        sql.setEditable(false);

        jButton1.setText("Browse");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Next");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Cancel");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE))
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(69, 69, 69)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(orcl, javax.swing.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE)
                            .addComponent(acces, javax.swing.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE)
                            .addComponent(sql, javax.swing.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(83, 83, 83))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(376, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(acces, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sql, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(orcl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(82, 82, 82)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton2))
                .addContainerGap(92, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
                final JFileChooser sqlf=new JFileChooser();
sqlf.setSize(500,500);
//sql.showOpenDialog(this);
sqlf.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
//sqlf.setDialogType(JFileChooser.DIRECTORIES_ONLY);
sqlf.setAcceptAllFileFilterUsed(false);
sqlf.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                if(e.getActionCommand().equalsIgnoreCase("ApproveSelection"))
                 sql.setText(sqlf.getSelectedFile().getAbsolutePath().toString());
                  
            }
        });
sqlf.showDialog(this.getParent(), "Select");

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
//validation first
       String err[]= step2();
if(err[2].equalsIgnoreCase("true"))
 step21();
else
{}//show err message
    }//GEN-LAST:event_jButton2ActionPerformed


             public String[] step2()
             {       String ret[]={"","","true"};
            //System.out.println("orcl"+ orcl.getText());


                if(!orcl.getText().equalsIgnoreCase(""))
                {
                    try{
                        DriverManager.registerDriver(new oracle.jdbc.driver.OracleDriver());
                        Connection con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:"+ orcl.getText(),"scott" , "tiger"); //database name and password,username
     
                        }catch(Exception e ){e.printStackTrace();ret[0]=e.getMessage();ret[2]="false";}
                }
                if (!sql.getText().equalsIgnoreCase(""))
                {
                    try{
                    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                    String connectionUrl = "jdbc:sqlserver://localhost;integratedSecurity=true";
                    Connection con = DriverManager.getConnection(connectionUrl);
                        }catch(Exception e){e.printStackTrace();ret[1]=e.getMessage();ret[2]="false";}
                }
return ret;
    }

               public void step21()
             {
            File acc=new File(System.getProperty("user.dir")+"/"+acces.getText());
            File sqlf =new File(sql.getText());
            FileFilter acs=new FileFilter() {


            public boolean accept(File pathname) {
                //pathname.getName();
                //System.out.println("pathnames" + pathname.getAbsolutePath()+"name " + pathname.getName());
                String [] spltf=pathname.getName().split("\\.");
                int len=spltf.length;
                String fileext="";
                if(len>1)
                fileext=spltf[len-1];
                if(fileext.equalsIgnoreCase("accdb") || fileext.equalsIgnoreCase("mdb"))
                return true;
                else
                return false;
            }
        };


       // System.out.println("accc" + acc.getAbsoluteFile().toString());
            int k=0,j=0;
           String [] tempacclist=acc.list();
           String [] sqllist={};
           String []acclist={};
           if (acc.list()[0]!=null)
           {for (int i=0;i<tempacclist.length;i++)
            {
                //System.out.println(" files are " + tempacclist[i]);
                boolean ac=acs.accept(new File(tempacclist[i]));
                  if (!ac)
                  tempacclist[i]="";

            }
           int counta=0;
            for( j=0;j<tempacclist.length;j++)
                {
                if (!tempacclist[j].equalsIgnoreCase(""))
                counta++;
                }
                acclist=new String[counta];
                k=0;j=0;
            while(k<counta)
            {
            if (!tempacclist[j].equalsIgnoreCase(""))
            acclist[k++]=tempacclist[j];
            j++;
            }


           }




           if(!sql.getText().equalsIgnoreCase(""))
           {
               FileFilter sqlff=new FileFilter() {

            public boolean accept(File pathname) {
                //pathname.getName();
                //System.out.println("pathnames" + pathname.getAbsolutePath()+"name " + pathname.getName());
                String [] spltf=pathname.getName().split("\\.");
                int len=spltf.length;
                String fileext="";
                if(len>1)
                fileext=spltf[len-1];
                String database="";
                for (int j=0;j<spltf.length-1;j++)
                database+=spltf[j];
                if(fileext.equalsIgnoreCase("mdf") && !database.equalsIgnoreCase("mssqlsystemresource") && !database.equalsIgnoreCase("msdbdata") )
                return true;
                else
                return false;
            }
        };
            //if(!sql.getText().equalsIgnoreCase(""))
            String [] tempsqllist=null;
             //sqlf=new File("C:\\Program Files (x86)\\Microsoft SQL Server\\MSSQL.1\\MSSQL\\Data");
                tempsqllist=sqlf.list();

            if(tempsqllist[0]!=null)
            {

          //   System.out.println(" sql are " + tempsqllist.length);

            for (int i=0;i<tempsqllist.length;i++)
            {
                //System.out.println("asdasd" + tempsqllist[i]);

                boolean ac=sqlff.accept(new File(tempsqllist[i]));
                  if (!ac)
                  tempsqllist[i]="";

            }
            int countsql=0;


                for(int i=0;i<tempsqllist.length;i++)
                {
                if (!tempsqllist[i].equalsIgnoreCase(""))
                countsql++;
                }
                sqllist=new String[countsql];
                k=0;j=0;
                while(k<countsql)
                {
                if (!tempsqllist[j].equalsIgnoreCase(""))
                sqllist[k++]=tempsqllist[j];
                j++;
                }



            }
           }

                /*
                 for ( j=0;j<sqllist.length;j++)
                System.out.println("asd" + sqllist[j]);

                 for ( j=0;j<acclist.length;j++)
                System.out.println("acc" + acclist[j]);
                */

                //frame.removeAll();
                //frame.update(getGraphics());
                //this.getContentPane().removeAll();
                //this.getContentPane().update(getGraphics());
             this.jPanel1.removeAll();
             this.jPanel1.update(getGraphics());
             JScrollPane m=new JScrollPane(this.jPanel1,JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);

             m.setVisible(true);
             this.add(m);


             usrnam=new JTextField[sqllist.length+acclist.length];
             //mit be password field but not sure coz user wont come to know for so many
             //n if password then will have to be converted to string since it comes in char arr
             pass=new JTextField[sqllist.length+acclist.length];
             db =new JLabel [sqllist.length+acclist.length];
           //  System.out.println("sql l" + sqllist.length + " acc l " + acclist.length);
             int d=0;
             for(int i=0;i<acclist.length;i++)
             {db[d++]=new JLabel(acclist[i]);
             }
             for(int i=0;i<sqllist.length;i++)
             {db[d++]=new JLabel (sqllist[i]);
             }
             this.jPanel1.setLayout(new GridBagLayout());
                     GridBagConstraints c = new GridBagConstraints();

                     c.fill = GridBagConstraints.HORIZONTAL;
                     c.weightx = 0.5;
                     c.ipadx=15;
                     c.ipady=15;
                     c.gridx=1;
                     c.gridy=0;
                     c.insets=new Insets(20,10,0,0);
                     this.jPanel1.add(new JLabel("Username"),c);
                     c.gridx=2;
                     c.gridy=0;

                     this.jPanel1.add(new JLabel("Password"),c);


                     int i=0;
                     for ( i=0;i<sqllist.length+acclist.length;i++)
             {

             c.fill = GridBagConstraints.HORIZONTAL;
             c.weightx = 0.25;
             c.ipadx=15;
             c.ipady=15;
             c.gridx=0;
             c.gridy=2*(i+1);
             c.insets=new Insets(20,10,0,0);
             usrnam[i]=new JTextField();
             pass[i]=new JTextField();


             db[i].setSize(30,15);
             db[i].setVisible(true);
             this.jPanel1.add(db[i],c);

             c.gridx=1;
             c.gridy=2*(i+1);
             usrnam[i].setSize(30, 15);
             usrnam[i].setVisible(true);
             this.jPanel1.add(usrnam[i],c);
             c.gridx=2;
             c.gridy=2*(i+1);
             pass[i].setSize(30, 15);
             pass[i].setVisible(true);
             this.jPanel1.add(pass[i],c);



             }


                JButton next=new JButton("Next");

                 c.weightx = 1.0;
                 c.weighty=1;
                c.gridx=1;
                c.gridy=2*(i+1);
                 c.insets=new Insets(20,10,0,0);
                c.fill=GridBagConstraints.NONE;
                 this.jPanel1.add(next,c);
                 JButton cancel=new JButton("Cancel");
                   c.weightx = 1.0;
                 c.weighty=1;

                c.gridx=2;
                c.gridy=2*(i+1);
                c.fill=GridBagConstraints.NONE;
                this.jPanel1.add(cancel,c);

                this.jPanel1.setSize(1000, 450);
                this.setSize((int)(Toolkit.getDefaultToolkit().getScreenSize().getWidth()*0.6),(int)(Toolkit.getDefaultToolkit().getScreenSize().getHeight()*0.6));
                m.setSize(this.getSize().width-25, this.getSize().height-25);

                this.setResizable(false);


                next.addActionListener(new ActionListener(){

            public void actionPerformed(ActionEvent e) {
                step23();
            }
               });

                cancel.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
              frame.dispose();
            }
        });

                this.jPanel1.update(getGraphics());
                this.paintAll(getGraphics());


             }//end of step21



            public void step23()
            {



                String usr[]=new String [usrnam.length] ;
                String pas [] =new String [pass.length];
                String dba [] =new String [db.length];
                String err [] =new String [db.length];
                
                boolean suc=true;
               try{
                     BufferedWriter cin2=new BufferedWriter(new FileWriter(System.getProperty("user.dir")+"/system//inf.txt"));
                     BufferedWriter cin=new BufferedWriter(new FileWriter(System.getProperty("user.dir")+"/system//info.txt"));//change this to info.txt
                                     if(!sql.getText().equalsIgnoreCase(""))
                                     {   cin2.write("1,");
                                         cin.write(sql.getText());
                                         cin.newLine();
                                     }else
                                        {   cin.newLine();
                                            cin2.write(",");
                                        }
             if(!acces.getText().equalsIgnoreCase(""))
             {  cin.write(new File(acces.getText()).getAbsolutePath().toString());
                cin.newLine();
                cin2.write("2,");
             }else
                {   cin.newLine();
                    cin2.write(",");
                }

             if(!orcl.getText().equalsIgnoreCase(""))
             {  cin.write(orcl.getText());
                cin.newLine();
                cin2.write("3");
             }  else
                    {   cin.newLine();
                    }
             cin2.newLine();
             cin2.close();
             cin.close();
             }  catch(Exception e ){e.printStackTrace();}



             int i=0;
            for ( i=0;i<dba.length;i++)
            {
              usr[i]=usrnam[i].getText();
            pas[i]=pass[i].getText();
            dba[i]=db[i].getText();

            String [] spltf=db[i].getText().split("\\.");
            int len=spltf.length;
            String fileext="";
            if(len>1)
            {fileext=spltf[len-1];
            }
            String database="";
            for (int j=0;j<spltf.length-1;j++)
            database+=spltf[j];
            //rememeber if password set then username can be nething except null so either set it or let the user find out himself
                if (fileext.equalsIgnoreCase("accdb") || fileext.equalsIgnoreCase("mdb"))
                {   try{
                      System.out.println("databbase" + db[i].getText());
                    Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                    String conStro = "jdbc:odbc:Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=" +System.getProperty("user.dir")+"/access//"+db[i].getText() ;
                   //  String conStro = "jdbc:odbc:Driver={Microsoft Access Driver (*.mdb)};DBQ=" +"access//"+db[i].getText() ;

                    Connection con=DriverManager.getConnection(conStro,usrnam[i].getText(),pass[i].getText());
                    }catch(Exception e ){e.printStackTrace();err[i]=e.getMessage();suc=false;break;}
                }
                if (fileext.equalsIgnoreCase("mdf"))
                {try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                String connectionUrl = "jdbc:sqlserver://localhost;databaseName="+database+";integratedSecurity=true"; // database name,password and username
                Connection con = DriverManager.getConnection(connectionUrl,usrnam[i].getText(),pass[i].getText());
                 }catch(Exception e){e.printStackTrace();err[i]=e.getMessage();suc=false;break;}
                }
            }//end of for
                
                if (suc)
                {
                    step3();
                //continue
                }
                else
                {

                String er[]={"Make sure u have the latest  drivers installed",err[i]};
                errorcheck(er,"Error");
                }//show error message

            }

            public void step3()
            {
                try{

                BufferedWriter wout=new BufferedWriter(new FileWriter(System.getProperty("user.dir")+"/system//localcnffile.txt",false));
                BufferedWriter wut=new BufferedWriter(new FileWriter(System.getProperty("user.dir")+"/system//iplist.txt",false));
                wut.write(InetAddress.getLocalHost().getHostAddress());
                wut.close();
                //creation of localcnffile
             for (int i=0;i<db.length;i++)
            {
           // usr[i]=usrnam[i].getText();
            //pas[i]=pass[i].getText();
            //dba[i]=db[i].getText();

            String [] spltf=db[i].getText().split("\\.");
            int len=spltf.length;
            String fileext="";
            if(len>1)
            {fileext=spltf[len-1];
            }
            String database="";
            for (int j=0;j<spltf.length-1;j++)
            database+=spltf[j];

        if(fileext.equalsIgnoreCase("accdb")||fileext.equalsIgnoreCase("mdb"))
        {

        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
        String conStro = "jdbc:odbc:Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=" +System.getProperty("user.dir")+"/access//"+  db[i].getText();
         Connection   con=DriverManager.getConnection(conStro,usrnam[i].getText(),pass[i].getText());		//password

            DatabaseMetaData dbmd = con.getMetaData();
             String tableName ="";
            ResultSet rsColumns = null;
            DatabaseMetaData meta =null;


                String[] types = {"TABLE"};
                 ResultSet resultSet = dbmd.getTables(null, null, "%", types);

                  while (resultSet.next()) {
                 tableName = resultSet.getString(3);
                 rsColumns = null;
                 meta = con.getMetaData();
                  rsColumns = meta.getColumns(null, null,tableName , null);
        wout.write("Name-"+tableName+","+db[i].getText()+";"); // write to localcnfg file
        wout.newLine();
        wout.write("UP-"+usrnam[i].getText()+","+pass[i].getText()+";");
        wout.newLine();
        wout.write("Frag-,1;");
        wout.newLine();
        wout.write("Col-");

        int c=1;
        while (rsColumns.next()) {
	c++;}
        rsColumns = meta.getColumns(null, null,tableName , null);

        for (int p=1;p<(c-1);p++)
        {rsColumns.next();
        String columnName = rsColumns.getString("COLUMN_NAME");
        wout.write(columnName+",");

        }rsColumns.next();

        String columnName = rsColumns.getString("COLUMN_NAME");
        wout.write(columnName);
        wout.write(":"+	InetAddress.getLocalHost().getHostAddress()+";");
        wout.newLine();
        wout.write("P:0;");
        wout.newLine();
                  }
                  
               con.close();
         }//end of if access
        if (fileext.equalsIgnoreCase("mdf") && !database.equalsIgnoreCase("mssqlsystemresource") && !database.equalsIgnoreCase("msdbdata"))
        {
        Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
        String connectionUrl = "jdbc:sqlserver://localhost:1433;databaseName="+database+";integratedSecurity=true"; // database name,password and username
        Connection con = DriverManager.getConnection(connectionUrl,usrnam[i].getText(),pass[i].getText());

        DatabaseMetaData dbmd = con.getMetaData();
        String tableName ="";
        ResultSet rsColumns = null;
        DatabaseMetaData meta =null;


    String[] types = {"TABLE"};
    ResultSet resultSet = dbmd.getTables(null, null, "%", types);

    while (resultSet.next()) {
        tableName = resultSet.getString(3);
  rsColumns = null;
    meta = con.getMetaData();
    rsColumns = meta.getColumns(null, null,tableName , null);
	wout.write("Name-"+tableName+","+db[i].getText()+";"); // write to localcnfg file
wout.newLine();
wout.write("UP-"+usrnam[i].getText()+","+pass[i].getText()+";");
wout.newLine();
wout.write("Frag-,1;");
wout.newLine();
wout.write("Col-");

int c=1;
while (rsColumns.next()) {
	c++;}
rsColumns = meta.getColumns(null, null,tableName , null);

for (int p=1;p<(c-1);p++)
{rsColumns.next();
String columnName = rsColumns.getString("COLUMN_NAME");
wout.write(columnName+",");

}rsColumns.next();

String columnName = rsColumns.getString("COLUMN_NAME");
wout.write(columnName);
wout.write(":"+	InetAddress.getLocalHost().getHostAddress()+";");
wout.newLine();
wout.write("P:0;");
wout.newLine();
}
con.close();
       } //end of if sql
 }//end of for
             //over here for oracle if orcl!=null
    if(!orcl.getText().equalsIgnoreCase(""))
    {
    
    DriverManager.registerDriver(new oracle.jdbc.driver.OracleDriver());
    Connection con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:"+orcl.getText(),"scott" , "tiger"); // change it to scott we love scott nt system

    OracleDatabaseMetaData dmd = (OracleDatabaseMetaData)con.getMetaData();
    OracleDatabaseMetaData meta = (OracleDatabaseMetaData)con.getMetaData();
    ResultSet rsColumns = null;

    ResultSet rs1 = dmd.getTables(null,"SCOTT","%",null); // keep the username and schem name same we are not checking authorization only scott possible no other
    String user="scott";
    String pas="tiger";


    while(rs1.next()) {

//           System.out.println("   table : "+rs1.getString(3) );

        wout.write("Name-"+rs1.getString(3)+","+orcl.getText()+";"); // write to localcnfg file
        wout.newLine();
        wout.write("UP-"+user+","+pas+";");
        wout.newLine();
        wout.write("Frag-,1;");
        wout.newLine();
        wout.write("Col-");
        rsColumns = meta.getColumns(null, null,rs1.getString(3), null);
        int c=1;
        while (rsColumns.next()) {
	c++;}


        rsColumns = meta.getColumns(null, null,rs1.getString(3) , null);

        for (int p=1;p<(c-1);p++)
        {rsColumns.next();
        String columnName = rsColumns.getString("COLUMN_NAME");
        wout.write(columnName+",");

        }rsColumns.next();

        String columnName = rsColumns.getString("COLUMN_NAME");
        wout.write(columnName);
        wout.write(":"+	InetAddress.getLocalHost().getHostAddress()+";");
        wout.newLine();
        wout.write("P:0;");
        wout.newLine();
          }
    
    con.close();
    
    }//end of oracle


wout.close();


                }catch(Exception e){e.printStackTrace();}
            String err[]=tablenamecheck();
            if(err[0].equalsIgnoreCase("true"))
            {Systemfunction obj=new Systemfunction();
             obj.textfilecopy(System.getProperty("user.dir")+"/system//localcnffile.txt", System.getProperty("user.dir")+"/system//cnffile.txt");
            step4search();}//continue if it passes over here then make a copy of localcnffile n store it as cnnfile ask
            else
            {
            String erf[]={err[1]};
            errorcheck(erf,"Error");

            }//display dialog box

            }//end of step3





            public String[] tablenamecheck()
            {
                String ret[]={"true",""};
try{
File re=new File(System.getProperty("user.dir")+"/system//localcnffile.txt");
BufferedReader win=new BufferedReader(new FileReader(re));
String read="";
int count=1;
read=win.readLine();
//System.out.println("read " + read);
while( read!=null)
{read=win.readLine();
count++;
//System.out.println("read22 " + read);
}

String [] table=new String[(int)(count/5)];
//System.out.println("count " + count );
win.close();
int len=count;
read="";
count=0;
win=new BufferedReader(new FileReader(re));
read=win.readLine();
//while(!read.equalsIgnoreCase(""))
for (int i=0;i<len;i++)
{
if (read!=null)
{
String []temp=read.split(",");
if(!temp[0].equalsIgnoreCase(""))
{
String []nam=temp[0].split("-");
if(!nam[1].equalsIgnoreCase(""))
{table[count++]=nam[1];
//System.out.println("read line "  + read);
//System.out.println("table name =" +nam[1]);
}}
}
win.readLine();
win.readLine();
win.readLine();
win.readLine();
read=win.readLine();
}
win.close();
/*
for (int i=0;i<table.length;i++)
{System.out.println("table names "  +  table[i]);
}
*/
int b=0;
for (int i=0;i<table.length;i++)
{
String cont=table[i];
int c=i;
for(int j=0;j<table.length;j++)
{
if((cont.equalsIgnoreCase(table[j])) && (c!=j))
{
//new File("localfile.txt").delete();
//System.out.println("true" + cont + c + j);
ret[0]="false";
ret[1]="Table names are  to be unique.Table name found: " + table[c];
b=1;
break;	// delete file raise na error and tell him to repeat the process
}
}
if(b==1)
{break;}

}
re=null;

}catch(Exception e ){e.printStackTrace();ret[0]="false";ret[1]=e.getMessage();}
return ret;
}//end of tnc


            public void step4search()
            {//System.out.println("inside");

            final JDialog ser=new JDialog(this,"Search",JDialog.ModalityType.APPLICATION_MODAL);
            ser.setSize(400, 200);
            ser.setResizable(false);
            ser.setLayout(new GridBagLayout());
            GridBagConstraints c = new GridBagConstraints();
                     c.fill = GridBagConstraints.HORIZONTAL;
                     c.weightx = 0.5;
                     c.ipadx=15;
                     c.ipady=15;
                     c.gridx=1;
                     c.gridy=0;

            ser.add(new JLabel("DO you want to search more nodes on the network? "),c);
           JButton ok=new JButton("OK");
            c.gridx=1;
            c.gridy=1;
            c.gridwidth=10;
            c.gridheight=5;
            c.fill = GridBagConstraints.NONE;
            c.anchor=GridBagConstraints.SOUTHWEST;
            c.insets=new Insets(20,10,20,10);
            ok.setMaximumSize(new Dimension(5,10));
            ok.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
               ser.dispose();
                step41();
            }
                });
            ser.add(ok,c);

            JButton can=new JButton("Cancel");
            c.gridx=2;
            c.gridy=1;
            c.gridwidth=10;
            c.gridheight=5;
            c.fill = GridBagConstraints.NONE;
            c.anchor=GridBagConstraints.SOUTHEAST;
            c.insets=new Insets(20,10,20,10);
            can.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
               ser.dispose();
            }
        });


            ser.add(can,c);
            ser.setLocationRelativeTo(this);
            ser.setVisible(true);
            }//end of step4search

            public  void step41()
            {
            final JDialog ser=new JDialog(this,"Search",JDialog.ModalityType.APPLICATION_MODAL);
            ser.setSize(400, 200);
            ser.setResizable(false);
            ser.setLayout(new GridBagLayout());
            GridBagConstraints c = new GridBagConstraints();
                     c.fill = GridBagConstraints.HORIZONTAL;
                     c.weightx = 0.5;
                     c.ipadx=15;
                     c.ipady=15;
                     c.gridx=1;
                     c.gridy=0;
            ser.add(new JLabel("Enter the range of ip addresses? "),c);

            c.gridx=1;
            c.gridy=5;
            c.ipady=5;
            c.fill=GridBagConstraints.NONE;
            c.anchor=GridBagConstraints.SOUTHWEST;
            c.insets=new Insets(10,10,0,10);
            //c.gridwidth=10;
            //c.gridheight=5;
            JButton ok=new JButton("OK");
            JButton can=new JButton("Cancel");
            final JTextField r1=new JTextField();
            final JTextField r2=new JTextField();
            final JTextField r3=new JTextField();
            
            
            //validation needed for ip range


            ok.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
               //validation for ip addrerssses n range
               ser.dispose();
               boolean flag=false;
               String rr1[]=r1.getText().split("\\.");
            String rr3[]=r3.getText().split("\\.");
              try{
            for(int i=0;i<rr1.length;i++)
            {
              
                if((Integer.parseInt(rr1[i])<0 || Integer.parseInt(rr1[i])>255)&&(Integer.parseInt(r3.getText())<0 || Integer.parseInt(r3.getText())>255))
                {
                    flag=true;
                    break;
                }
               
            }
             }
                catch(Exception e1)
                {
                    String er[]={"Enter the proper format of IP Address"};
                    errorcheck(er,"IPERROR");

                }
            if(flag)
            {
                step41();
            }
            else
            {
                step42(r1.getText(),r3.getText());
            }
            }
                });
            can.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
               ser.dispose();
            }
        });
            ser.add(ok,c);
            c.gridx=2;
            c.gridy=5;
            c.ipady=5;
            c.fill=GridBagConstraints.NONE;
            c.anchor=GridBagConstraints.SOUTHEAST;
            c.insets=new Insets(10,10,0,10);
            ser.add(can,c);
            r1.addCaretListener(new CaretListener() {

            public void caretUpdate(CaretEvent e) {
              if(e.getDot()>=0)
              {
              String temp[]=r1.getText().split("\\.");
              if(temp.length<=3)
              r2.setText(r1.getText());
              }

            }
        });
            c.gridx=1;
            c.gridy=2;
            r1.setColumns(30);
            r1.setVisible(true);
            ser.add(r1,c);
            c.gridx=1;
            c.gridy=3;
            ser.add(new JLabel("to"),c);
            c.gridx=1;
            c.gridy=4;
            r2.setColumns(30);
            r2.setEditable(false);
            r2.setVisible(true);
            ser.add(r2,c);
            c.gridx=2;
            c.gridy=4;
            r3.setColumns(5);
            ser.add(r3,c);
            ser.pack();
            ser.setLocationRelativeTo(this);
            ser.setVisible(true);

            }
            
            public void step42(String r1,String r3)
            {



                //validation for ip addresses n range n r2 biger then r1;


            
            String rr1 [] =r1.split("\\.");
            String rr3[]=r3.split("\\.");
            //validation
            int rr=0;
            if(Integer.parseInt(r3)>Integer.parseInt(rr1[3]))
            {
            rr=Integer.parseInt(r3)-Integer.parseInt(rr1[3]);

            }
            else
            {
                rr=Integer.parseInt(rr1[3])-Integer.parseInt(r3);

            }
             System.out.println("we got hte ip now do the newhostup" + rr);

            String ipr []=new String [rr+1];
            //comm2 [] ipup=new comm2[ipr.length];
            //String err [][]=new String[ipr.length][2];
            for (int i=0;i<ipr.length;i++)
            {
                ipr[i]=rr1[0]+"."+rr1[1]+"."+rr1[2]+"."+String.valueOf(Integer.parseInt(rr1[3])+i);
                //System.out.println(ipr[i]);
            }

                 

         newhostup as=  new newhostup(ipr,this);
                 
         String err[]=as.run2();
          if(err[0].equalsIgnoreCase("true"))
         {
             System.out.println("error display appropriate message ");
             //get the system back to original state
         String ef[]={err[1]};
         errorcheck(ef,"Error");

          }
         //else if(err[2].equalsIgnoreCase(""))
         //{
         //System.out.println("no new nodes found");
         //String ef[]={err[1]};
         //errorcheck(ef,"Error");
        // }//else
        // {
         //System.out.println("show that a mew node has been found n everything has been done properly");
         //String ef[]={err[2],"Setup has been performed successfuly"};
         //errorcheck(ef,"Message");

         //}

            }//end of step42
            
/*
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Setup().setVisible(true);
            }
        });
    }
*/



            public boolean  errorcheck(String err [],String msg )//dialog box
            {
    //System.out.println("Message  sadasd" +err.length );
            boolean cont=true;



final JDialog errorBox=new JDialog(frame,msg,JDialog.ModalityType.APPLICATION_MODAL);
errorBox.setLayout(new GridBagLayout());

GridBagConstraints c = new GridBagConstraints();
c.gridwidth=3;
//System.out.println("error length" + err.length);
JLabel lbl[]=new JLabel[err.length];
int g=0;
for(g=0;g<err.length && err[g]!=null;g++)

{
    if(!err[g].equalsIgnoreCase("false"))
    {

    lbl[g]=new JLabel(err[g]);
    c.fill = GridBagConstraints.HORIZONTAL;
    c.weightx = 0.5;
    c.ipadx=0;
    c.ipady=10;
    c.gridx=1;
    c.gridy=g;

lbl[g].setSize(100, 30);
lbl[g].setVisible(true);
errorBox.add(lbl[g],c);

    //System.out.println("Message "+g +"   " +err[g]);
    cont=false;
    }
    /*else
    {
        Message="Correct Query";
    }*/
            }
JButton button1= new JButton("ok");
//c.fill = GridBagConstraints.HORIZONTAL;
    c.weightx = 0.5;
    c.ipadx=0;
    c.ipady=10;
    c.gridx=2;
    c.gridy=(++g+2);
    c.gridwidth=2;
    c.anchor=GridBagConstraints.CENTER;
    c.fill=GridBagConstraints.NONE;

    button1.setSize(50,50);

    button1.setMaximumSize(new Rectangle(50,50).getSize());



    //button1.setBounds(200,200,70, 50);
    button1.setVisible(true);
    errorBox.add(button1,c);
    button1.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e)
            {

                //throw new UnsupportedOperationException("Not supported yet.");
                errorBox.dispose();


            }
        });
    errorBox.pack();
    //errorBox.setSize(500,300);
    errorBox.setResizable(false);
    errorBox.setLocationRelativeTo(this.getContentPane());
    if(!cont)
    errorBox.setVisible(true);





return cont;
}

    public void checksql()
    {
    try{
    File sqlfile=new File("C:\\Program Files (x86)\\Microsoft SQL Server\\MSSQL.1\\MSSQL\\Data");
    File sqlfile2=new File("C:\\Program Files\\Microsoft SQL Server\\MSSQL.1\\MSSQL\\Data");
    if(sqlfile.exists())
    sql.setText(sqlfile.getCanonicalPath());
    else if (sqlfile2.exists())
    sql.setText(sqlfile2.getCanonicalPath());


   System.load(System.getProperty("user.dir")+"/lib/sqljdbc_auth.dll");
   System.setProperty("java.library.path", System.getProperty("user.dir")+"/lib/sqljdbc_auth.dll");
   
    }catch(Exception e){e.printStackTrace();}

    }








    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField acces;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField orcl;
    private javax.swing.JTextField sql;
    // End of variables declaration//GEN-END:variables

    //my declarations
   JFrame frame=this;
   JTextField [] usrnam={};
   JTextField [] pass={};
   JLabel [] db ={};


}




/*
 * things left to be done
 * generating the iplist file
 * storing which nodes support which format //sql,ora,access
 * the new user will do the search for new nodes.never the old user
 * coz if the old user does it,the iplist would be lost.can be made vice versa but if time persist
 */